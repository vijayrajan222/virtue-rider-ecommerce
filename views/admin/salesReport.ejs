<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales Report - Admin</title>
    <link rel="stylesheet" href="/tailwindcss/output.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <link
      href="https://fonts.googleapis.com/icon?family=Material+Icons"
      rel="stylesheet"
    />

</head>
<body class="mybg-green">
    <%- include('../partials/sidebar') %>

    <div class="p-4 sm:ml-64">
        <div class="p-4 mt-14">
            <!-- Main Content -->
            <div class="bg-white rounded-lg shadow-lg p-6">
                <!-- Filter Section -->
                <div class="mb-6">
                    <h2 class="text-2xl font-bold mb-4">Sales Report</h2>
                    <div class="flex flex-wrap gap-4 mb-4">
                        <button onclick="setPeriod('daily')" 
                                class="px-4 py-2 rounded-lg transition-colors <%= period === 'daily' ? 'bg-black text-white' : 'bg-gray-100 hover:bg-gray-200' %>">
                            <i class="far fa-calendar-day mr-2"></i>Daily
                        </button>
                        <button onclick="setPeriod('weekly')"
                                class="px-4 py-2 rounded-lg transition-colors <%= period === 'weekly' ? 'bg-black text-white' : 'bg-gray-100 hover:bg-gray-200' %>">
                            <i class="far fa-calendar-week mr-2"></i>Weekly
                        </button>
                        <button onclick="setPeriod('monthly')"
                                class="px-4 py-2 rounded-lg transition-colors <%= period === 'monthly' ? 'bg-black text-white' : 'bg-gray-100 hover:bg-gray-200' %>">
                            <i class="far fa-calendar-alt mr-2"></i>Monthly
                        </button>
                        <button onclick="setPeriod('yearly')"
                                class="px-4 py-2 rounded-lg transition-colors <%= period === 'yearly' ? 'bg-black text-white' : 'bg-gray-100 hover:bg-gray-200' %>">
                            <i class="far fa-calendar mr-2"></i>Yearly
                        </button>
                    </div>
                    <div class="flex flex-wrap gap-4 items-end">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
                            <input type="date" id="startDate" class="px-4 py-2 border rounded-lg focus:ring-2 focus:ring-black" 
                                   value="<%= dateRange.start?.toISOString().split('T')[0] %>">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">End Date</label>
                            <input type="date" id="endDate" class="px-4 py-2 border rounded-lg focus:ring-2 focus:ring-black"
                                   value="<%= dateRange.end?.toISOString().split('T')[0] %>">
                        </div>
                        <button onclick="applyDateFilter()" 
                                class="px-6 py-2 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors">
                            <i class="fas fa-filter mr-2"></i>Apply Filter
                        </button>
                    </div>
                </div>

                <!-- Metrics Section -->
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                    <div class="bg-gradient-to-br from-gray-50 to-gray-100 p-6 rounded-xl shadow-sm">
                        <div class="flex items-center justify-between mb-2">
                            <h3 class="text-gray-500 text-sm">Total Orders</h3>
                            <i class="fas fa-shopping-cart text-gray-400"></i>
                        </div>
                        <p class="text-3xl font-bold text-gray-800"><%= metrics.totalOrders %></p>
                    </div>
                    <div class="bg-gradient-to-br from-gray-50 to-gray-100 p-6 rounded-xl shadow-sm">
                        <div class="flex items-center justify-between mb-2">
                            <h3 class="text-gray-500 text-sm">Total Sales</h3>
                            <i class="fas fa-rupee-sign text-gray-400"></i>
                        </div>
                        <p class="text-3xl font-bold text-gray-800">₹<%= metrics.totalSales.toFixed(2) %></p>
                    </div>
                    <div class="bg-gradient-to-br from-gray-50 to-gray-100 p-6 rounded-xl shadow-sm">
                        <div class="flex items-center justify-between mb-2">
                            <h3 class="text-gray-500 text-sm">Total Discount</h3>
                            <i class="fas fa-tags text-gray-400"></i>
                        </div>
                        <p class="text-3xl font-bold text-gray-800">₹<%= metrics.totalDiscount.toFixed(2) %></p>
                    </div>
                    <div class="bg-gradient-to-br from-gray-50 to-gray-100 p-6 rounded-xl shadow-sm">
                        <div class="flex items-center justify-between mb-2">
                            <h3 class="text-gray-500 text-sm">Average Order Value</h3>
                            <i class="fas fa-chart-line text-gray-400"></i>
                        </div>
                        <p class="text-3xl font-bold text-gray-800">₹<%= metrics.averageOrderValue.toFixed(2) %></p>
                    </div>
                </div>


                <!-- Download Options -->
                <div class="flex gap-4 mb-6">
                    <button onclick="downloadReport('excel')" 
                            class="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                        <i class="fas fa-file-excel mr-2"></i>Download Excel
                    </button>
                    <button onclick="downloadReport('pdf')" 
                            class="px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                        <i class="fas fa-file-pdf mr-2"></i>Download PDF
                    </button>
                </div>

                <!-- Orders Table -->
                <div class="overflow-x-auto bg-white rounded-xl shadow-sm">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead>
                            <tr>
                                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Order ID
                                </th>
                                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Date
                                </th>
                                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Customer
                                </th>
                                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Items
                                </th>
                                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Status
                                </th>
                                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Payment Method
                                </th>
                                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Amount
                                </th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            <% orders.forEach(order => { %>
                                <tr class="hover:bg-gray-50">
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        <%= order.orderCode %>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        <%= order.createdAt.toLocaleDateString() %>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        <%= order.userId?.firstName %> <%= order.userId?.lastName %>
                                    </td>
                                    <td class="px-6 py-4 text-sm text-gray-900">
                                        <% order.items.forEach((item, index) => { %>
                                            <div class="<%= index > 0 ? 'mt-1' : '' %>">
                                                <%= item.quantity %>x <%= item.product.name %>
                                            </div>
                                        <% }); %>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <% order.items.forEach((item, index) => { %>
                                            <% const status = item.order.status;
                                            const statusColor = {
                                                'delivered': 'bg-green-100 text-green-800',
                                                'cancelled': 'bg-red-100 text-red-800',
                                                'returned': 'bg-gray-100 text-gray-800',
                                                'refund processing': 'bg-yellow-100 text-yellow-800',
                                                'pending': 'bg-blue-100 text-blue-800',
                                                'processing': 'bg-indigo-100 text-indigo-800',
                                                'shipped': 'bg-purple-100 text-purple-800'
                                            }[status] || 'bg-gray-100 text-gray-800'; %>
                                            <span class="<%= index > 0 ? 'mt-1' : '' %> px-2 flex text-xs leading-5 font-semibold rounded-full <%= statusColor %>">
                                                <%= status %>
                                            </span>
                                        <% }); %>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        <%= order.payment.method %>
                                        <% const paymentStatus = order.payment.paymentStatus;
                                        const paymentStatusColor = {
                                            'completed': 'bg-green-100 text-green-800',
                                            'failed': 'bg-red-100 text-red-800',
                                            'processing': 'bg-yellow-100 text-yellow-800',
                                            'refunded': 'bg-gray-100 text-gray-800',
                                            'cancelled': 'bg-red-100 text-red-800',
                                            'refund processing': 'bg-yellow-100 text-yellow-800'
                                        }[paymentStatus] || 'bg-gray-100 text-gray-800'; %>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        ₹<%= order.totalAmount.toFixed(2) %>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Initialize Chart
        const ctx = document.getElementById('salesChart').getContext('2d');
        const dailyData = <%- JSON.stringify(dailyData) %>;
        
        const dates = Object.keys(dailyData);
        const sales = dates.map(date => {
            const dayData = dailyData[date];
            return {
                orders: dayData.orders,
                sales: dayData.sales,
                discount: dayData.discount,
                netRevenue: dayData.netRevenue
            };
        });
        
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: dates,
                datasets: [{
                    label: 'Daily Sales',
                    data: sales,
                    borderColor: 'rgb(0, 0, 0)',
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Filter Functions
        function setPeriod(period) {
            window.location.href = `/admin/sales-report?period=${period}`;
        }

        async function applyDateFilter() {
            try {
                const startDateStr = document.getElementById('startDate').value;
                const endDateStr = document.getElementById('endDate').value;
                
                // Create dates and set to start and end of day
                const startDate = new Date(startDateStr);
                startDate.setHours(0, 0, 0, 0);
                
                const endDate = new Date(endDateStr);
                endDate.setHours(23, 59, 59, 999);
                
                const today = new Date();
                today.setHours(23, 59, 59, 999);

                // Client-side validation
                if (!startDateStr || !endDateStr) {
                    await Swal.fire({
                        icon: 'warning',
                        title: 'Missing Dates',
                        text: 'Please select both start and end dates',
                        confirmButtonColor: '#000000'
                    });
                    return;
                }

                if (startDate > today) {
                    await Swal.fire({
                        icon: 'error',
                        title: 'Invalid Date',
                        text: 'Start date cannot be in the future',
                        confirmButtonColor: '#000000'
                    });
                    return;
                }

                if (endDate < startDate) {
                    await Swal.fire({
                        icon: 'error',
                        title: 'Invalid Date Range',
                        text: 'End date must be after or equal to start date',
                        confirmButtonColor: '#000000'
                    });
                    return;
                }

                window.location.href = `/admin/sales-report?startDate=${startDateStr}&endDate=${endDateStr}`;

            } catch (error) {
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Error applying filter',
                    confirmButtonColor: '#000000'
                });
            }
        }

        // Download Functions
        async function downloadReport(type) {
            try {
                const startDateStr = document.getElementById('startDate').value;
                const endDateStr = document.getElementById('endDate').value;
                
                if (!startDateStr || !endDateStr) {
                    await Swal.fire({
                        icon: 'warning',
                        title: 'Missing Dates',
                        text: 'Please select both start and end dates',
                        confirmButtonColor: '#000000'
                    });
                    return;
                }

                const response = await fetch(`/admin/sales-report/download-${type}?startDate=${startDateStr}&endDate=${endDateStr}`);
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Download failed');
                }

                if (type === 'excel') {
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `sales-report-${startDateStr}-${endDateStr}.xlsx`;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    a.remove();
                } else {
                    window.location.href = `/admin/sales-report/download-${type}?startDate=${startDateStr}&endDate=${endDateStr}`;
                }
            } catch (error) {
                await Swal.fire({
                    icon: 'error',
                    title: 'Download Failed',
                    text: error.message || 'Error downloading report',
                    confirmButtonColor: '#000000'
                });
            }
        }
    </script>
</body>
</html> 