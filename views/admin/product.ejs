<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Product Management</title>
    <link rel="stylesheet" href="/tailwindcss/output.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js" defer></script>
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11" defer></script>
    <style>
      .image-preview {
        position: relative;
        overflow: hidden;
        width: 100%;
        height: 0;
        padding-bottom: 100%; /* Maintain a square aspect ratio */
      }

      .image-preview img {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
    </style>
  </head>
  <body class="mybg-green text-white min-h-screen">
    <%- include("../partials/sidebar") %>

    <div class="lg:ml-64 transition-all" id="main-content">
      <header class="flex items-center justify-between mb-8 p-4 lg:p-8 border-b border-gray-700">
        <button id="toggleSidebar" class="text-white lg:hidden">
          
        </button>
        <h1 class="text-2xl font-semibold text-gray-200">Product Management</h1>
      </header>

      <main class="p-4 lg:p-8">
        <div class="overflow-x-auto">
          <div class="min-w-full bg-zinc-800 rounded-lg shadow-md">
            <!-- Table Header with Add Product Button -->
            <div class="p-4 md:p-6 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
              <h2 class="text-xl md:text-2xl font-semibold text-gray-200">Products</h2>
              <button id="addProductBtn" 
                      class="bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors w-full sm:w-auto justify-center">
                <i class="fas fa-plus"></i>
                <span>Add Product</span>
              </button>
            </div>

            <!-- Table Container -->
            <div class="overflow-x-auto">
              <table class="min-w-full divide-y divide-zinc-700">
                <thead class="bg-zinc-900">
                  <tr>
                    <th class="px-4 py-3 text-left text-xs md:text-sm font-medium text-gray-300 uppercase tracking-wider">Image</th>
                    <th class="px-4 py-3 text-left text-xs md:text-sm font-medium text-gray-300 uppercase tracking-wider">Product</th>
                    <th class="px-4 py-3 text-left text-xs md:text-sm font-medium text-gray-300 uppercase tracking-wider hidden md:table-cell">Brand</th>
                    <th class="px-4 py-3 text-left text-xs md:text-sm font-medium text-gray-300 uppercase tracking-wider hidden lg:table-cell">Category</th>
                    <th class="px-4 py-3 text-left text-xs md:text-sm font-medium text-gray-300 uppercase tracking-wider">Price</th>
                    <th class="px-4 py-3 text-left text-xs md:text-sm font-medium text-gray-300 uppercase tracking-wider hidden sm:table-cell">Stock</th>
                    <th class="px-4 py-3 text-left text-xs md:text-sm font-medium text-gray-300 uppercase tracking-wider hidden sm:table-cell">Status</th>
                    <th class="px-4 py-3 text-right text-xs md:text-sm font-medium text-gray-300 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody class="divide-y divide-zinc-700">
                  <% products.forEach(product => { %>
                    <tr class="hover:bg-zinc-700/50 transition-colors">
                      <td class="px-4 py-3 whitespace-nowrap">
                        <img src="<%= product.imageUrl[0] %>" 
                             alt="<%= product.productName %>" 
                             class="w-12 h-12 md:w-16 md:h-16 object-cover rounded-lg">
                      </td>
                      <td class="px-4 py-3">
                        <div class="flex flex-col">
                          <span class="text-sm md:text-base font-medium text-gray-200"><%= product.productName %></span>
                          <span class="text-xs text-gray-400 md:hidden"><%= product.brand %></span>
                        </div>
                      </td>
                      <td class="px-4 py-3 text-sm md:text-base text-gray-300 hidden md:table-cell"><%= product.brand %></td>
                      <td class="px-4 py-3 text-sm md:text-base text-gray-300 hidden lg:table-cell"><%= product.categoriesId.name %></td>
                      <td class="px-4 py-3 text-sm md:text-base text-gray-200">â‚¹<%= product.price.toLocaleString() %></td>
                      <td class="px-4 py-3 text-sm md:text-base text-gray-300 hidden sm:table-cell"><%= product.stock %></td>
                      <td class="px-4 py-3 text-sm md:text-base text-gray-300 hidden sm:table-cell"><%= product.isActive ? 'Active' : 'Inactive' %></td>
                      <td class="px-4 py-3">
                        <div class="flex flex-col sm:flex-row gap-2 justify-end">
                          <button class="edit-product bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded-md text-sm transition-colors duration-200 w-full sm:w-auto"
                                  data-id="<%= product._id %>"
                                  type="button">
                                  Edit
                          </button>
                          
                          <button class="toggle-status px-3 py-1 rounded-md text-sm transition-colors duration-200 w-full sm:w-auto
                                       <%= product.isActive ? 'bg-red-600 hover:bg-red-700' : 'bg-green-600 hover:bg-green-700' %> text-white" 
                                  data-id="<%= product._id %>" 
                                  data-active="<%= product.isActive %>">
                            <%= product.isActive ? 'Hide' : 'Show' %>
                          </button>
                        </div>
                      </td>
                    </tr>
                  <% }); %>
                </tbody>
              </table>
            </div>

            <!-- Page Info -->
            <div class="px-4 py-3 flex flex-col sm:flex-row items-center justify-between border-t border-zinc-700">
                <div class="text-sm text-gray-400 mb-4 sm:mb-0">
                    Showing <span class="font-medium"><%= startIndex + 1 %></span> to 
                    <span class="font-medium"><%= endIndex %></span> of 
                    <span class="font-medium"><%= totalProducts %></span> products
                </div>

                <!-- Pagination Controls -->
                <div class="flex items-center gap-2">
                    <% if (currentPage > 1) { %>
                        <a href="?page=1" 
                           class="px-3 py-1 bg-zinc-700 text-gray-300 rounded hover:bg-zinc-600 text-sm transition-colors">
                                First
                            </a>
                            <a href="?page=<%= currentPage - 1 %>" 
                               class="px-3 py-1 bg-zinc-700 text-gray-300 rounded hover:bg-zinc-600 text-sm transition-colors">
                                Previous
                            </a>
                    <% } %>

                    <!-- Page Numbers -->
                    <div class="flex gap-1">
                        <% for(let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) { %>
                            <a href="?page=<%= i %>" 
                               class="px-3 py-1 rounded text-sm <%= currentPage === i ? 'bg-emerald-600 text-white' : 'bg-zinc-700 text-gray-300 hover:bg-zinc-600' %>">
                                <%= i %>
                            </a>
                        <% } %>
                    </div>

                    <% if (currentPage < totalPages) { %>
                        <a href="?page=<%= currentPage + 1 %>" 
                           class="px-3 py-1 bg-zinc-700 text-gray-300 rounded hover:bg-zinc-600 text-sm transition-colors">
                                Next
                            </a>
                            <a href="?page=<%= totalPages %>" 
                               class="px-3 py-1 bg-zinc-700 text-gray-300 rounded hover:bg-zinc-600 text-sm transition-colors">
                                Last
                            </a>
                    <% } %>
                </div>
            </div>

          </div>
        </div>
      </main>
    </div>

    <!-- Product Modal -->
    <div id="productModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center">
      <div class="bg-zinc-900 rounded-lg w-[90%] md:w-[800px] max-h-[90vh] overflow-y-auto p-6">
        <h2 id="modalTitle" class="text-xl font-bold text-gray-100 mb-4">Add New Product</h2>
        <form id="productForm" enctype="multipart/form-data">
          <input type="hidden" id="productId" name="productId">
          
          <div id="formErrorMessage" class="hidden bg-red-500 text-white p-3 rounded mb-4"></div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label class="block text-gray-400 mb-1">Product Name</label>
              <input type="text" 
                     name="productName" 
                     id="productName" 
                     required
                     oninput="this.value = capitalizeAndTrim(this.value)"
                     class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
              <p class="text-xs text-gray-500 mt-1">Only letters and spaces allowed</p>
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Brand</label>
              <input type="text" 
                     name="brand" 
                     id="brand" 
                     required
                     pattern="[A-Za-z\s]+"
                     oninput="this.value = capitalizeAndTrim(this.value)"
                     class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
              <p class="text-xs text-gray-500 mt-1">Only letters and spaces allowed</p>
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Gender</label>
              <select name="gender" id="gender" required
                      class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
                <option value="male">Male</option>
                <option value="female">Female</option>
                <option value="unisex">Unisex</option>
              </select>
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Category</label>
              <select name="categoriesId" id="categoriesId" required
                      class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
                <% categories.forEach(category => { %>
                  <option value="<%= category._id %>"><%= category.name %></option>
                <% }); %>
              </select>
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Color</label>
              <input type="text" 
                     name="color" 
                     id="color" 
                     required
                     pattern="[A-Za-z\s]+"
                     oninput="this.value = capitalizeAndTrim(this.value)"
                     class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
              <p class="text-xs text-gray-500 mt-1">Only letters and spaces allowed</p>
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Price (â‚¹)</label>
              <input type="number" name="price" id="price" min="0" step="1" required
                     class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Stock</label>
              <input type="number" name="stock" id="stock" min="0" required
                     class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Description</label>
              <input type="text" 
                     name="description" 
                     id="variantDescription" 
                     required
                     minlength="10"
                     maxlength="25"
                     oninput="this.value = validateVariantDescription(this.value)"
                     class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
              <p class="text-xs text-gray-500 mt-1">
                  <span id="variantCharCount">0</span>/25 characters (minimum 10)
              </p>
            </div>

            <div class="col-span-2">
              <label class="block text-gray-400 mb-1">
                Images (All 3 images are required - Max 5MB each, Square format)
              </label>
              <div class="grid grid-cols-3 gap-4">
                <% for(let i = 0; i < 3; i++) { %>
                  <div class="image-upload-container">
                    <input type="file" 
                           name="images" 
                           class="product-image hidden" 
                           accept="image/jpeg,image/png,image/webp"
                           data-index="<%= i %>"
                           required>
                    <div class="image-preview bg-zinc-800 border-2 border-dashed border-gray-600 rounded-lg p-4 text-center cursor-pointer hover:border-green-500 transition-colors">
                      <div class="preview-content h-48 flex flex-col items-center justify-center">
                        <i class="fas fa-cloud-upload-alt text-3xl mb-2"></i>
                        <p class="text-sm text-gray-400">Click to upload</p>
                        <p class="text-xs text-gray-500 mt-1">Image <%= i + 1 %> (Required)</p>
                        <p class="text-xs text-gray-500">Square format, max 5MB</p>
                      </div>
                    </div>
                    <p class="error-message text-red-500 text-xs mt-1 hidden"></p>
                  </div>
                <% } %>
              </div>
            </div>
          </div>

          <div class="flex justify-end mt-6 space-x-4">
            <button type="button" id="cancelModal" 
                    class="bg-gray-700 hover:bg-gray-600 text-gray-200 font-semibold py-2 px-4 rounded-lg">
              Cancel
            </button>
            <button type="submit"
                    class="bg-green-600 hover:bg-green-500 text-white font-semibold py-2 px-4 rounded-lg">
              Save Product
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Image Cropper Modal -->
    <div id="cropperModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center">
      <div class="bg-zinc-900 rounded-lg p-6 w-[90%] md:w-[600px]">
        <h3 class="text-lg font-semibold mb-4 text-gray-200">Crop Image</h3>
        <div class="mb-4">
          <div id="cropperContainer" class="max-h-[400px] overflow-hidden">
            <img id="cropperImage" src="" alt="Image to crop">
          </div>
        </div>
        <div class="flex justify-end space-x-4">
          <button id="cancelCrop" class="bg-gray-700 hover:bg-gray-600 text-gray-200 font-semibold py-2 px-4 rounded-lg">
            Cancel
          </button>
          <button id="cropImage" class="bg-green-600 hover:bg-green-500 text-white font-semibold py-2 px-4 rounded-lg">
            Crop & Save
          </button>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // DOM Elements
        const productModal = document.getElementById('productModal');
        const cropperModal = document.getElementById('cropperModal');
        const addProductBtn = document.getElementById('addProductBtn');
        const cancelModal = document.getElementById('cancelModal');
        const productForm = document.getElementById('productForm');
        const modalTitle = document.getElementById('modalTitle');
        const toggleSidebar = document.getElementById('toggleSidebar');
        const mainContent = document.getElementById('main-content');
        const cropperImage = document.getElementById('cropperImage');
        const cancelCrop = document.getElementById('cancelCrop');
        const cropImage = document.getElementById('cropImage');

        let currentImageInput = null;
        let cropper = null;
        let croppedImageBlob = null;

        // Toggle Sidebar
        toggleSidebar.addEventListener('click', () => {
          mainContent.classList.toggle('lg:ml-64');
        });

        // Show Modal for New Product
        addProductBtn.addEventListener('click', () => {
          // Reset form and clear any previous data
          productForm.reset();
          document.getElementById('productId').value = '';
          modalTitle.textContent = 'Add New Product';
          
          // Clear image previews
          document.querySelectorAll('.image-preview').forEach(preview => {
            preview.innerHTML = `
              <i class="fas fa-cloud-upload-alt text-3xl mb-2"></i>
              <p class="text-sm text-gray-400">Click to upload</p>
              <p class="text-xs text-gray-500 mt-1">Required image</p>
              <p class="text-xs text-gray-500">Square format, max 5MB</p>
              <p class="text-xs text-gray-500">JPG, JPEG, PNG, or WebP</p>
            `;
          });

          // Reset character count
          document.getElementById('variantCharCount').textContent = '0';
          
          // Show modal
          productModal.classList.remove('hidden');
        });

        // Hide Modal
        cancelModal.addEventListener('click', () => {
          Swal.fire({
            title: 'Are you sure?',
            text: "Any unsaved changes will be lost!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#10B981',
            cancelButtonColor: '#EF4444',
            confirmButtonText: 'Yes, close it!'
          }).then((result) => {
            if (result.isConfirmed) {
              productModal.classList.add('hidden');
              productForm.reset();
            }
          });
        });

        // Handle Image Upload and Preview
        document.querySelectorAll('.product-image').forEach(input => {
          input.addEventListener('change', async (e) => {
            const file = e.target.files[0];
            if (!file) return;

            // Update file type validation to include WebP
            const validTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/webp'];
            const maxSize = 5 * 1024 * 1024; // 5MB in bytes

            // Validate file size
            

            // Validate file type
            if (!validTypes.includes(file.type)) {
                await Swal.fire({
                    icon: 'error',
                    title: 'Invalid File Type',
                    text: 'Please upload only JPG, JPEG, PNG, or WebP images',
                    confirmButtonColor: '#10B981'
                });
                input.value = '';
                return;
            }

            currentImageInput = input;
            const reader = new FileReader();
            
            reader.onload = (e) => {
                cropperImage.src = e.target.result;
                cropperModal.classList.remove('hidden');
                
                if (cropper) {
                    cropper.destroy();
                }
                
                cropper = new Cropper(cropperImage, {
                    aspectRatio: 1,
                    viewMode: 2,
                    autoCropArea: 1,
                    responsive: true,
                    restore: false,
                    guides: true,
                    center: true,
                    highlight: false,
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                    toggleDragModeOnDblclick: false,
                });
            };
            reader.readAsDataURL(file);
          });
        });

        // Cancel Crop
        cancelCrop.addEventListener('click', () => {
          cropperModal.classList.add('hidden');
          currentImageInput.value = '';
          if (cropper) {
            cropper.destroy();
            cropper = null;
          }
        });

        // Crop Image
        cropImage.addEventListener('click', async () => {
          if (!cropper) return;

          try {
            const canvas = cropper.getCroppedCanvas({
              width: 800,
              height: 800,
              imageSmoothingEnabled: true,
              imageSmoothingQuality: 'high',
            });

            const preview = currentImageInput.closest('.image-upload-container').querySelector('.image-preview');
            
            // Convert to WebP if supported, fallback to JPEG
            const format = 'image/webp';
            const quality = 0.9;

            // Try WebP first
            let blob = await new Promise(resolve => canvas.toBlob(resolve, format, quality));
            
            // Fallback to JPEG if WebP fails
            if (!blob) {
                blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/jpeg', quality));
            }

            // Create appropriate filename with extension
            const extension = blob.type === 'image/webp' ? 'webp' : 'jpg';
            const fileName = `cropped-image.${extension}`;
            
            // Create a File object
            const croppedFile = new File([blob], fileName, {
                type: blob.type,
                lastModified: new Date().getTime()
            });

            // Create a new FileList-like object
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(croppedFile);
            
            // Update the file input
            currentImageInput.files = dataTransfer.files;

            // Update preview
            preview.innerHTML = `<img src="${canvas.toDataURL(blob.type, quality)}" class="w-full h-full object-cover rounded">`;

            // Close cropper modal
            cropperModal.classList.add('hidden');
            cropper.destroy();
            cropper = null;

          } catch (error) {
            console.error('Cropping error:', error);
            await Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'Failed to crop image',
              confirmButtonColor: '#10B981'
            });
          }
        });

        // Form submission handler for edit
        document.getElementById('productForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            try {
                // Show loading state
                Swal.fire({
                    title: 'Processing...',
                    text: 'Please wait while we process your request',
                    allowOutsideClick: false,
                    confirmButtonColor: '#10B981',
                });

                const formData = new FormData(this);
                const productId = document.getElementById('productId').value;
                
                // Validate required fields
                const requiredFields = ['productName', 'brand', 'gender', 'categoriesId', 'color', 'description', 'price', 'stock'];
                for (const field of requiredFields) {
                    const value = formData.get(field);
                    if (!value || value.trim() === '') {
                        throw new Error(`${field.charAt(0).toUpperCase() + field.slice(1).replace(/([A-Z])/g, ' $1')} is required`);
                    }
                }

                let url, processedFormData;
                
                if (productId) {
                    // Edit mode
                    url = `/admin/product/edit/${productId}`;
                    processedFormData = new FormData();
                    
                    // Add all non-file fields
                    for (let [key, value] of formData.entries()) {
                        if (key !== 'images') {
                            processedFormData.append(key, value);
                        }
                    }
                    
                    // Handle image files
                    const updatedImageIndexes = [];
                    const imageInputs = document.querySelectorAll('.product-image');
                    
                    imageInputs.forEach((input, index) => {
                        if (input.files && input.files[0]) {
                            processedFormData.append('images', input.files[0]);
                            updatedImageIndexes.push(index);
                        }
                    });
                    
                    if (updatedImageIndexes.length > 0) {
                        processedFormData.append('imageIndexes', updatedImageIndexes.join(','));
                    }
                } else {
                    // New product mode
                    url = '/admin/product/add';
                    processedFormData = formData;
                    
                    // Validate all images are present for new product
                    const imageInputs = document.querySelectorAll('.product-image');
                    let hasAllImages = true;
                    
                    imageInputs.forEach(input => {
                        if (!input.files || !input.files[0]) {
                            hasAllImages = false;
                        }
                    });
                    
                    if (!hasAllImages) {
                        throw new Error('Please upload all 3 required images');
                    }
                }

                const response = await fetch(url, {
                    method: 'POST',
                    body: processedFormData
                });

                const data = await response.json();

                if (response.ok) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: data.message,
                        confirmButtonColor: '#10B981'
                    });
                    window.location.reload();
                } else {
                    throw new Error(data.message || 'Error processing request');
                }

            } catch (error) {
                console.error('Error:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'An error occurred while processing your request',
                    confirmButtonColor: '#10B981'
                });
            }
        });

        // Remove the required attribute from form fields since we're handling validation with JavaScript
        document.querySelectorAll('input, select, textarea').forEach(element => {
            element.removeAttribute('required');
        });

        // Handle Product Edit
        document.querySelectorAll('.edit-product').forEach(button => {
            button.addEventListener('click', async () => {
                try {
                    // Get product ID from data attribute
                    const productId = button.getAttribute('data-id');
                    
                    // Fetch product data from server
                    const response = await fetch(`/admin/product/${productId}`);
                    if (!response.ok) {
                        throw new Error('Failed to fetch product data');
                    }
                    
                    const product = await response.json();
                    console.log('Fetched product data:', product); // Debug log

                    // Update modal title
                    modalTitle.textContent = 'Edit Product';
                    
                    // Fill form fields
                    document.getElementById('productId').value = product._id;
                    document.getElementById('productName').value = product.productName || '';
                    document.getElementById('brand').value = product.brand || '';
                    document.getElementById('gender').value = product.gender || '';
                    document.getElementById('categoriesId').value = product.categoriesId._id || '';
                    document.getElementById('color').value = product.color || '';
                    document.getElementById('price').value = product.price || '';
                    document.getElementById('stock').value = product.stock || '';
                    document.getElementById('variantDescription').value = product.description || '';
                    
                    // Update character count for description
                    const variantCharCount = document.getElementById('variantCharCount');
                    if (variantCharCount) {
                        variantCharCount.textContent = (product.description || '').length;
                    }

                    // Show existing images
                    const previews = document.querySelectorAll('.image-preview');
                    const imageInputs = document.querySelectorAll('.product-image');
                    
                    // Reset image inputs and make them optional for editing
                    imageInputs.forEach(input => {
                        input.removeAttribute('required');
                        input.value = ''; // Clear any previous file selections
                    });

                    // Display existing images in previews
                    if (product.imageUrl && Array.isArray(product.imageUrl)) {
                        product.imageUrl.forEach((url, index) => {
                            if (previews[index]) {
                                const previewContent = previews[index].querySelector('.preview-content');
                                if (previewContent && url) {
                                    previewContent.innerHTML = `
                                        <img src="${url}" class="w-full h-full object-cover rounded">
                                        <div class="mt-2">
                                            <p class="text-xs text-gray-500">Current image ${index + 1}</p>
                                            <p class="text-xs text-gray-500">Click to change (optional)</p>
                                        </div>
                                    `;
                                }
                            }
                        });
                    }

                    // Show modal
                    productModal.classList.remove('hidden');

                } catch (error) {
                    console.error('Error loading product data:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Error loading product data. Please try again.',
                        confirmButtonColor: '#10B981'
                    });
                }
            });
        });

        // Delete Product Handler
        document.querySelectorAll('.delete-product').forEach(button => {
          button.addEventListener('click', async function() {
            const productId = this.getAttribute('data-id');
            
            const result = await Swal.fire({
              title: 'Are you sure?',
              text: "You won't be able to revert this!",
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#10B981',
              cancelButtonColor: '#EF4444',
              confirmButtonText: 'Yes, delete it!'
            });

            if (result.isConfirmed) {
              try {
                const response = await fetch(`/admin/product/delete/${productId}`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });

                const data = await response.json();

                if (response.ok) {
                  await Swal.fire({
                    title: 'Deleted!',
                    text: 'Product has been deleted.',
                    icon: 'success',
                    confirmButtonColor: '#10B981'
                  });
                  window.location.reload();
                } else {
                  Swal.fire({
                    title: 'Error!',
                    text: data.message || 'Error deleting product',
                    icon: 'error',
                    confirmButtonColor: '#10B981'
                  });
                }
              } catch (error) {
                console.error('Delete error:', error);
                Swal.fire({
                  title: 'Error!',
                  text: 'An error occurred while deleting the product',
                  icon: 'error',
                  confirmButtonColor: '#10B981'
                });
              }
            }
          });
        });

        // Handle Status Toggle
        document.querySelectorAll('.toggle-status').forEach(button => {
          button.addEventListener('click', async () => {
            const productId = button.dataset.id;
            const isActive = button.dataset.active === 'true';
            const newStatus = !isActive ? 'activate' : 'deactivate';
            
            const result = await Swal.fire({
              title: 'Are you sure?',
              text: `Do you want to ${newStatus} this product?`,
              icon: 'question',
              showCancelButton: true,
              confirmButtonColor: '#10B981',
              cancelButtonColor: '#6B7280',
              confirmButtonText: 'Yes, proceed!'
            });

            if (result.isConfirmed) {
              try {
                const response = await fetch(`/admin/product/toggle-status/${productId}`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({ isActive: !isActive })
                });

                if (response.ok) {
                  await Swal.fire({
                    title: 'Success!',
                    text: `Product ${newStatus}d successfully`,
                    icon: 'success',
                    confirmButtonColor: '#10B981',
                    timer: 3000
                  });
                  window.location.reload();
                } else {
                  const error = await response.json();
                  Swal.fire({
                    title: 'Error!',
                    text: error.message || `Error ${newStatus}ing product`,
                    icon: 'error',
                    confirmButtonColor: '#10B981'
                  });
                }
              } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                  title: 'Error!',
                  text: 'An error occurred while updating product status',
                  icon: 'error',
                  confirmButtonColor: '#10B981'
                });
              }
            }
          });
        });

        // Image handling functions
        function handleImageUpload(input, preview, errorMessage) {
          const file = input.files[0];
          const maxSize = input.getAttribute('data-max-size') * 1024;

          errorMessage.textContent = '';
          errorMessage.classList.add('hidden');
          
          if (!file) {
            errorMessage.textContent = 'Image is required';
            errorMessage.classList.remove('hidden');
            return;
          }

          if (file.size > maxSize) {
            errorMessage.classList.remove('hidden');
            input.value = '';
            return;
          }

          const img = new Image();
          const reader = new FileReader();

          reader.onload = function(e) {
            img.src = e.target.result;
            img.onload = function() {
              const aspectRatio = this.width / this.height;
              if (aspectRatio < 0.8 || aspectRatio > 1.2) {
                errorMessage.textContent = 'Please use a square image (1:1 ratio)';
                errorMessage.classList.remove('hidden');
                input.value = '';
                return;
              }

              preview.innerHTML = `
                <img src="${e.target.result}" 
                     class="w-full h-full object-cover rounded">
              `;
            };
          };
          reader.readAsDataURL(file);
        }

        // Initialize image upload handlers
        document.querySelectorAll('.image-upload-container').forEach(container => {
          const preview = container.querySelector('.image-preview');
          const input = container.querySelector('input[type="file"]');
          const errorMessage = container.querySelector('.error-message');

          preview.addEventListener('click', () => input.click());
          input.addEventListener('change', () => handleImageUpload(input, preview, errorMessage));
        });

        function capitalizeAndTrim(value) {
          // Remove extra spaces and trim
          value = value.replace(/\s+/g, ' ').trim();
          
          // Capitalize first letter of each word
          return value.split(' ')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
            .join(' ');
        }

        // Form validation
        document.getElementById('productForm').addEventListener('submit', function(e) {
          const nameInput = document.getElementById('productName');
          const brandInput = document.getElementById('brand');
          const colorInput = document.getElementById('color');
          
          const letterPattern = /^[A-Za-z\s]+$/;
          let errors = [];

          if (!letterPattern.test(nameInput.value)) {
            errors.push('Product Name must contain only letters and spaces');
          }
          
          if (!letterPattern.test(brandInput.value)) {
            errors.push('Brand must contain only letters and spaces');
          }
          
          if (!letterPattern.test(colorInput.value)) {
            errors.push('Color must contain only letters and spaces');
          }

          if (errors.length > 0) {
            e.preventDefault();
            showValidationError(errors.join('\n'));
            return false;
          }

          // Capitalize and trim all text inputs before submission
          nameInput.value = capitalizeAndTrim(nameInput.value);
          brandInput.value = capitalizeAndTrim(brandInput.value);
          colorInput.value = capitalizeAndTrim(colorInput.value);
        });

        // Initialize all text inputs with proper formatting
        document.querySelectorAll('input[type="text"]').forEach(input => {
          input.addEventListener('blur', function() {
            this.value = capitalizeAndTrim(this.value);
          });
        });

        // Character counter for variant description
        const variantDescField = document.getElementById('variantDescription');
        const variantCharCount = document.getElementById('variantCharCount');

        function validateVariantDescription(value) {
            // Update character count
            variantCharCount.textContent = value.length;
            
            // Trim and limit length
            value = value.trim();
            if (value.length > 25) {
                value = value.substring(0, 25);
            }
            
            return value;
        }

        variantDescField.addEventListener('input', function() {
            variantCharCount.textContent = this.value.length;
        });

        // Form submission handler (update the existing one)
        async function submitForm(form) {
          try {
            const formData = new FormData(form);
            const productId = document.getElementById('productId').value;
            
            // Show loading state
            Swal.fire({
              title: 'Processing...',
              text: 'Please wait while we save the product',
              allowOutsideClick: false,
              confirmButtonColor: '#10B981',
            });

            const url = productId 
              ? `/admin/product/edit/${productId}`
              : '/admin/product/add';

            const response = await fetch(url, {
              method: 'POST',
              body: formData
            });

            if (response.ok) {
              await Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: productId ? 'Product updated successfully' : 'Product added successfully',
                confirmButtonColor: '#10B981',
                timer: 3000
              });
              window.location.reload();
            } else {
              const data = await response.json();
              await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message || 'Error processing request',
                confirmButtonColor: '#10B981'
              });
            }
          } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'An error occurred while processing your request',
              confirmButtonColor: '#10B981'
            });
          }
        }

        // Replace form validation alerts
        function showValidationError(message) {
          Swal.fire({
            title: 'Validation Error',
            text: message,
            icon: 'error',
            confirmButtonColor: '#10B981'
          });
        }

        // Add helper function for image validation
        function validateImageFile(file) {
          // Validate file size (5MB) 

          // Update valid types to include WebP
          const validTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/webp'];
          if (!validTypes.includes(file.type)) {
            Swal.fire({
              icon: 'error',
              title: 'Invalid File Type',
              text: 'Please upload only JPG, JPEG, PNG, or WebP images',
              confirmButtonColor: '#10B981'
            });
            return false;
          }

          return true;
        }

        // Add this new code to your existing script section
        document.addEventListener('DOMContentLoaded', () => {
          const imageContainers = document.querySelectorAll('.image-upload-container');
          
          imageContainers.forEach(container => {
            const input = container.querySelector('input[type="file"]');
            const preview = container.querySelector('.image-preview');
            const errorMessage = container.querySelector('.error-message');
            
            preview.addEventListener('click', () => input.click());
            
            input.addEventListener('change', function(e) {
              const file = this.files[0];
              if (!file) return;
              
              // Validate file size
              if (file.size > 5 * 1024 * 1024) {
                errorMessage.classList.remove('hidden');
                this.value = '';
                return;
              }
              
              // Validate file type
              const validTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/webp'];
              if (!validTypes.includes(file.type)) {
                errorMessage.textContent = 'Invalid file type. Only JPG, JPEG, PNG, and WebP are allowed';
                errorMessage.classList.remove('hidden');
                this.value = '';
                return;
              }
              
              // Create preview
              const reader = new FileReader();
              reader.onload = function(e) {
                const img = new Image();
                img.onload = function() {
                  // Check aspect ratio
                  const aspectRatio = this.width / this.height;
                  if (Math.abs(aspectRatio - 1) > 0.1) {
                    errorMessage.textContent = 'Please use a square image (1:1 ratio)';
                    errorMessage.classList.remove('hidden');
                    input.value = '';
                    return;
                  }
                  
                  preview.querySelector('.preview-content').innerHTML = `
                    <img src="${e.target.result}" class="w-full h-full object-cover rounded">
                  `;
                  errorMessage.classList.add('hidden');
                };
                img.src = e.target.result;
              };
              reader.readAsDataURL(file);
            });
          });

          // Handle Edit Product Image Display
          const editButtons = document.querySelectorAll('.edit-product');
          editButtons.forEach(button => {
            button.addEventListener('click', () => {
              const product = JSON.parse(button.getAttribute('data-product'));
              if (product.imageUrl && Array.isArray(product.imageUrl)) {
                const previews = document.querySelectorAll('.preview-content');
                product.imageUrl.forEach((url, index) => {
                  if (previews[index]) {
                    previews[index].innerHTML = `
                      <img src="${url}" class="w-full h-full object-cover rounded">
                      <div class="mt-2">
                        <p class="text-xs text-gray-500">Current image ${index + 1}</p>
                        <p class="text-xs text-gray-500">Click to change (optional)</p>
                      </div>
                    `;
                  }
                });
                
                // Make image inputs optional for editing
                document.querySelectorAll('.product-image').forEach(input => {
                  input.removeAttribute('required');
                });
              }
            });
          });

          // Form submission validation for images
          document.getElementById('productForm').addEventListener('submit', function(e) {
            const productId = document.getElementById('productId').value;
            const imageInputs = this.querySelectorAll('input[type="file"]');
            
            // Only validate images for new products
            if (!productId) {
              let hasAllImages = true;
              let validImages = true;
              
              imageInputs.forEach(input => {
                if (!input.files || !input.files[0]) {
                  hasAllImages = false;
                }
              });
              
              if (!hasAllImages) {
                e.preventDefault();
                Swal.fire({
                  icon: 'error',
                  title: 'Images Required',
                  text: 'Please upload all 3 required images',
                  confirmButtonColor: '#10B981'
                });
                return;
              }
            }
            
            // Validate any uploaded images (for both new and edit)
            imageInputs.forEach(input => {
              if (input.files && input.files[0]) {
                const file = input.files[0];
                if (file.size > 5 * 1024 * 1024) {
                  e.preventDefault();
                  Swal.fire({
                    icon: 'error',
                    title: 'File Too Large',
                    text: 'Each image must be less than 5MB',
                    confirmButtonColor: '#10B981'
                  });
                  return;
                }
              }
            });
          });
        });

        // Add this helper function to safely parse JSON
        function safeJSONParse(str) {
            try {
                return JSON.parse(str);
            } catch (e) {
                console.error('JSON Parse Error:', e);
                return null;
            }
        }
      });
    </script>
  </body>
</html>
