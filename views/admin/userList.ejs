<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin UserList</title>
    <link rel="stylesheet" href="/tailwindcss/output.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
      integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <link
      href="https://fonts.googleapis.com/icon?family=Material+Icons"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  </head>
  <body class="mybg-green text-white min-h-screen">
    <div id="loadingSpinner" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div class="animate-spin rounded-full h-16 w-16 border-t-4 border-blue-500"></div>
    </div>



    <!-- Sidebar -->
    <%- include("../partials/sidebar") %>

    <!-- Main Content -->
    <div class="lg:ml-64 transition-all" id="main-content">
      <!-- Header -->
      <header
        class="flex items-center justify-between mb-8 p-4 lg:p-8 border-b border-gray-700"
      >
        <button
          id="toggleSidebar"
          class="text-white lg:hidden"
          aria-label="Toggle Sidebar"
        >
        </button>
        <main class="p-4 lg:p-8">
    <h1 class="text-2xl font-semibold text-gray-200 mb-4">User Management</h1>

    <div class="overflow-x-auto bg-zinc-800 rounded-lg p-4">
        <table class="w-full border-collapse">
            <thead>
                <tr class="bg-zinc-700">
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">ID</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Name</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Email</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
                </tr>
            </thead>
            <tbody class="divide-y divide-zinc-700">
                <% if (users && users.length > 0) { %>
                    <% users.forEach(user => { %>
                        <tr class="hover:bg-zinc-700 transition-colors">
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                                <%= user._id %>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                                <%= user.name %>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                                <%= user.email %>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                                    <%= user.isBlocked ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800' %>">
                                    <%= user.isBlocked ? 'Blocked' : 'Active' %>
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                <button 
                                    onclick="toggleUserBlock('<%= user._id %>', <%= user.isBlocked %>)"
                                    class="px-4 py-2 rounded-md text-sm font-medium
                                    <%= user.isBlocked ? 'bg-green-600 hover:bg-green-700' : 'bg-red-600 hover:bg-red-700' %>
                                    text-white transition-colors">
                                    <%= user.isBlocked ? 'Unblock' : 'Block' %>
                                </button>
                            </td>
                        </tr>
                    <% }); %>
                <% } else { %>
                    <tr>
                        <td colspan="5" class="px-6 py-4 text-center text-gray-300">
                            No users found
                        </td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>
</main>
      </header>

      <!-- Customer Table -->
      

          <!-- Pagination -->
         

          <div class="mt-4 text-center text-sm text-gray-400">
            Showing page 
          </div>
        </div>
      </main>
    </div>

    <script>
    const utils = {
      toggleLoading: (show) => {
        document.getElementById('loadingSpinner').classList.toggle('hidden', !show);
      },

      showAlert: async ({ title, text, icon = 'success', showCancelButton = false }) => {
        return Swal.fire({
          title,
          text,
          icon,
          showCancelButton,
          confirmButtonColor: '#10B981',
          cancelButtonColor: '#6B7280',
          confirmButtonText: showCancelButton ? 'Yes, proceed' : 'OK',
          cancelButtonText: 'Cancel'
        });
      }
    };

    async function toggleUserBlock(userId, currentStatus) {
      try {
        const action = currentStatus ? 'unblock' : 'block';
        
        const result = await utils.showAlert({
          title: `Confirm ${action}?`,
          text: `Are you sure you want to ${action} this user?`,
          icon: 'warning',
          showCancelButton: true
        });

        if (!result.isConfirmed) return;

        utils.toggleLoading(true);

        const response = await fetch(`/admin/user/${userId}/toggle-block`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        if (!response.ok) {
          throw new Error('Failed to update user status');
        }

        await utils.showAlert({
          title: 'Success!',
          text: `User has been ${action}ed successfully`,
          icon: 'success'
        });

        window.location.reload();
      } catch (error) {
        await utils.showAlert({
          title: 'Error!',
          text: error.message,
          icon: 'error'
        });
      } finally {
        utils.toggleLoading(false);
      }
    }

    // Check URL parameters for messages on page load
    document.addEventListener('DOMContentLoaded', () => {
      const urlParams = new URLSearchParams(window.location.search);
      const successMsg = urlParams.get('success');
      const errorMsg = urlParams.get('error');

      if (successMsg) {
        utils.showAlert({
          title: 'Success!',
          text: decodeURIComponent(successMsg),
          icon: 'success'
        });
      }

      if (errorMsg) {
        utils.showAlert({
          title: 'Error!',
          text: decodeURIComponent(errorMsg),
          icon: 'error'
        });
      }
    });

    async function fetchPage(page) {
        try {
            utils.toggleLoading(true);

            const response = await fetch(`/admin/userList?page=${page}`, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });

            if (!response.ok) throw new Error('Failed to fetch users');

            const html = await response.text();

            // Create a temporary container
            const temp = document.createElement('div');
            temp.innerHTML = html;

            // Update the table body
            const newTableBody = temp.querySelector('tbody');
            document.querySelector('tbody').innerHTML = newTableBody.innerHTML;

            // Update the pagination
            const newPagination = temp.querySelector('.pagination-container');
            document.querySelector('.pagination-container').innerHTML = newPagination.innerHTML;

        } catch (error) {
            console.error('Error fetching users:', error);
            await utils.showAlert({
                title: 'Error',
                text: 'Failed to fetch users',
                icon: 'error'
            });
        } finally {
            utils.toggleLoading(false);
        }
    }

    // Update your pagination links to use fetchPage
    document.addEventListener('DOMContentLoaded', () => {
        const paginationContainer = document.querySelector('.pagination-container');
        if (paginationContainer) {
            paginationContainer.addEventListener('click', (e) => {
                e.preventDefault();
                if (e.target.tagName === 'A') {
                    const page = new URLSearchParams(e.target.href.split('?')[1]).get('page');
                    fetchPage(page);
                }
            });
        }
    });
    </script>
  </body>
</html>
