<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>My Wishlist - Virtue Rider</title>
    <link rel="stylesheet" href="/tailwindcss/output.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
    <style>
        .main-wrapper {
            background-image: linear-gradient(135deg, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.5) 100%), url('/images/aa.jpg');
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
            min-height: 100vh;
        }

        .glass-card {
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(8px);
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .sidebar-link {
            transition: all 0.3s ease;
        }

        .sidebar-link.active {
            background: rgba(255, 255, 255, 0.2);
            border-right: 3px solid white;
        }

        .sidebar-link:hover:not(.active) {
            background: rgba(255, 255, 255, 0.1);
        }
    </style>
</head>

<body>
    <%- include("../partials/nav") %>

    <div class="main-wrapper pt-20">
        <div class="container mx-auto px-4">
            <div class="flex flex-col md:flex-row gap-6 py-8">
                <!-- Sidebar -->
                <div class="md:w-1/4">
                    <div class="glass-card rounded-xl p-6 sticky top-24">
                        <!-- Profile Summary -->
                        <div class="text-center mb-6">
                            <div class="w-24 h-24 mx-auto bg-white/10 rounded-full flex items-center justify-center border-2 border-white/30 mb-4">
                                <i class="fas fa-user text-3xl text-white/90"></i>
                            </div>
                            <h2 class="text-xl font-bold text-white"><%= user.firstname %> <%= user.lastname %></h2>
                            <p class="text-white/70 text-sm">Member since <%= new Date(user.createdAt).toLocaleDateString('en-US', { month: 'long', year: 'numeric' }) %></p>
                        </div>

                        <!-- Navigation Links -->
                        <nav class="space-y-2">
                            <a href="/profile" class="sidebar-link flex items-center gap-3 text-white px-4 py-2.5 rounded-lg">
                                <i class="fas fa-user-circle"></i>
                                <span>Personal Info</span>
                            </a>
                            <a href="/orders" class="sidebar-link flex items-center gap-3 text-white px-4 py-2.5 rounded-lg">
                                <i class="fas fa-shopping-bag"></i>
                                <span>My Orders</span>
                            </a>
                            <a href="/address" class="sidebar-link flex items-center gap-3 text-white px-4 py-2.5 rounded-lg">
                                <i class="fas fa-map-marker-alt"></i>
                                <span>Addresses</span>
                            </a>
                            <a href="/wallet" class="sidebar-link flex items-center gap-3 text-white px-4 py-2.5 rounded-lg">
                                <i class="fas fa-wallet"></i>
                                <span>Wallet</span>
                            </a>
                            <a href="/coupons" class="sidebar-link flex items-center gap-3 text-white px-4 py-2.5 rounded-lg">
                                <i class="fas fa-ticket-alt"></i>
                                <span>My Coupons</span>
                            </a>
                            <a href="/wishlist" class="sidebar-link active flex items-center gap-3 text-white px-4 py-2.5 rounded-lg">
                                <i class="fas fa-heart"></i>
                                <span>Wishlist</span>
                            </a>
                            <hr class="border-white/20 my-3">
                            <a href="/logout" class="sidebar-link flex items-center gap-3 text-white/90 px-4 py-2.5 rounded-lg hover:bg-red-500/20">
                                <i class="fas fa-sign-out-alt"></i>
                                <span>Logout</span>
                            </a>
                        </nav>
                    </div>
                </div>

                <!-- Main Content -->
                <div class="md:w-3/4">
                    <div class="glass-card rounded-xl p-8">
                        <div class="flex justify-between items-center mb-8">
                            <div>
                                <h2 class="text-2xl font-bold text-white">My Wishlist</h2>
                                <p class="text-white/70 mt-1">(<span id="wishlist-count"><%= wishlist.length %></span> items)</p>
                            </div>
                        </div>

                        <% if (wishlist.length === 0) { %>
                            <div class="text-center py-12">
                                <div class="text-white/40 mb-4">
                                    <i class="fas fa-heart text-4xl"></i>
                                </div>
                                <h3 class="text-lg font-medium text-white mb-2">Your wishlist is empty</h3>
                                <p class="text-white/60 mb-6">Start adding items you love to your wishlist</p>
                                <a href="/shop" class="inline-block bg-white text-black px-6 py-3 rounded-lg hover:bg-opacity-90 transition-colors">
                                    Continue Shopping
                                </a>
                            </div>
                        <% } else { %>
                            <div id="wishlist-grid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                                <% wishlist.forEach((item, index) => { %>
                                    <% if (item.productId) { %>
                                        <div class="glass-card rounded-xl overflow-hidden relative flex flex-col <%= index >= 4 ? 'hidden' : '' %>"
                                             id="wishlist-item-<%= item.productId._id %>"
                                             data-index="<%= index %>">
                                            
                                            <div class="relative aspect-[4/5] overflow-hidden">
                                                <img src="<%= item.productId.images[0] || '/default-image.jpg' %>"
                                                     alt="<%= item.productId.name %>"
                                                     class="w-full h-full object-cover">
                                                <% if (!item.productId.isActive) { %>
                                                    <div class="absolute inset-0 bg-black/40 flex items-center justify-center">
                                                        <span class="text-white text-xs px-2 py-0.5 bg-black/75 rounded-full">
                                                            Unavailable
                                                        </span>
                                                    </div>
                                                <% } %>
                                            </div>

                                            <div class="p-4">
                                                <h3 class="text-white font-medium mb-2 line-clamp-2">
                                                    <%= item.productId.name %>
                                                </h3>
                                                
                                                <!-- Price Section -->
                                                <div class="flex items-baseline gap-2 mb-4">
                                                    <% if (item.productId.offer) { %>
                                                        <span class="text-lg font-bold text-white">₹<%= item.productId.offer.discountedPrice.toFixed(2) %></span>
                                                        <span class="text-sm text-white/60 line-through">₹<%= item.productId.price %></span>
                                                        <span class="text-xs font-medium text-green-400">
                                                            <%= item.productId.offer.discountAmount %><%= item.productId.offer.discountType === 'percentage' ? '%' : '₹' %> off
                                                        </span>
                                                    <% } else { %>
                                                        <span class="text-lg font-bold text-white">₹<%= item.productId.price %></span>
                                                    <% } %>
                                                </div>

                                                <!-- Action Buttons -->
                                                <div class="flex gap-2">
                                                    <% if (!item.productId.categoryId || !item.productId.isActive) { %>
                                                        <button disabled class="flex-1 bg-white/20 text-white/60 px-4 py-2 rounded-lg cursor-not-allowed">
                                                            Unavailable
                                                        </button>
                                                    <% } else if (item.productId.variants && item.productId.variants.length > 0 && item.productId.variants.some(v => v.stock > 0)) { %>
                                                        <button onclick="addToCart('<%= item.productId._id %>', '<%= item.productId.variants[0]._id %>')"
                                                                class="flex-1 bg-white text-black px-4 py-2 rounded-lg hover:bg-opacity-90 transition-colors">
                                                            Add to Cart
                                                        </button>
                                                    <% } else { %>
                                                        <button disabled class="flex-1 bg-white/20 text-white/60 px-4 py-2 rounded-lg cursor-not-allowed">
                                                            Out of Stock
                                                        </button>
                                                    <% } %>
                                                    <button onclick="removeFromWishlist('<%= item.productId._id %>')"
                                                            class="p-2 text-white hover:text-red-400 transition-colors">
                                                        <i class="fas fa-trash-alt"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    <% } %>
                                <% }); %>
                            </div>

                            <!-- Load More Button -->
                            <% if (wishlist.length > 4) { %>
                                <div class="text-center mt-6">
                                    <button id="load-more" 
                                            class="bg-white text-black px-6 py-2.5 rounded-lg hover:bg-opacity-90 transition-colors">
                                        Show More Items
                                    </button>
                                </div>
                            <% } %>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <%- include('../partials/footer') %>

    <div id="toast-container" class="fixed top-4 right-4 z-50 flex flex-col gap-2"></div>

    <script>
        // Custom toast notification function
        function showToast(type, title, message) {
            const container = document.getElementById('toast-container');
            const toast = document.createElement('div');
            
            // Set toast classes based on type
            const baseClasses = 'flex items-center p-4 rounded-lg shadow-lg transform transition-all duration-300 ease-out translate-x-full';
            const typeClasses = {
                success: 'bg-green-500 text-white',
                error: 'bg-red-500 text-white',
                warning: 'bg-yellow-500 text-white',
                info: 'bg-blue-500 text-white'
            };
            
            toast.className = `${baseClasses} ${typeClasses[type]}`;
            toast.innerHTML = `
                <div class="flex-shrink-0 mr-3">
                    ${type === 'success' ? '<i class="fas fa-check-circle"></i>' :
                      type === 'error' ? '<i class="fas fa-times-circle"></i>' :
                      type === 'warning' ? '<i class="fas fa-exclamation-circle"></i>' :
                      '<i class="fas fa-info-circle"></i>'}
                </div>
                <div class="flex-1">
                    <p class="font-medium">${title}</p>
                    ${message ? `<p class="text-sm opacity-90">${message}</p>` : ''}
                </div>
                <button class="ml-4 hover:opacity-80" onclick="this.parentElement.remove()">
                    <i class="fas fa-times"></i>
                </button>
            `;
            
            container.appendChild(toast);
            
            // Animate in
            requestAnimationFrame(() => {
                toast.classList.remove('translate-x-full');
            });
            
            // Auto remove after 3 seconds
            setTimeout(() => {
                toast.classList.add('translate-x-full');
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }

        async function removeFromWishlist(productId) {
            try {
                // Prevent event propagation
                event.preventDefault();
                event.stopPropagation();

                const response = await fetch(`/wishlist/remove/${productId}`, {
                    method: 'DELETE'
                });

                const data = await response.json();

                if (data.success) {
                    // Remove item from UI with animation
                    const item = document.getElementById(`wishlist-item-${productId}`);
                    item.style.opacity = '0';
                    item.style.transform = 'scale(0.95)';
                    item.style.transition = 'all 0.3s ease';
                    
                    setTimeout(() => {
                        item.remove();
                        
                        // Show next hidden item if available
                        const hiddenItems = document.querySelectorAll('[id^="wishlist-item-"].hidden');
                        if (hiddenItems.length > 0) {
                            const nextItem = hiddenItems[0];
                            nextItem.classList.remove('hidden');
                            nextItem.style.opacity = '0';
                            requestAnimationFrame(() => {
                                nextItem.style.opacity = '1';
                                nextItem.style.transition = 'opacity 0.3s ease';
                            });
                        }

                        // Update wishlist count
                        const wishlistCount = document.querySelectorAll('[id^="wishlist-item-"]').length;
                        document.querySelectorAll('#wishlist-count').forEach(el => {
                            el.textContent = wishlistCount;
                        });

                        // If wishlist is empty, reload page to show empty state
                        if (wishlistCount === 0) {
                            window.location.reload();
                        }

                        // Update load more button visibility
                        const loadMoreBtn = document.getElementById('load-more');
                        if (loadMoreBtn) {
                            const remainingItems = document.querySelectorAll('[id^="wishlist-item-"].hidden').length;
                            if (remainingItems === 0) {
                                loadMoreBtn.classList.add('hidden');
                            }
                        }
                    }, 300);

                    showToast('success', 'Item removed from wishlist');
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('Wishlist remove error:', error);
                showToast('error', 'Error', 'Error removing from wishlist');
            }
        }

        async function addToCart(productId, variantId) {
            try {
                // Add to cart
                const cartResponse = await fetch('/cart/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        productId,
                        variantId,
                        quantity: 1
                    })
                });

                const cartData = await cartResponse.json();

                if (!cartResponse.ok) {
                    throw new Error(cartData.message || 'Failed to add to cart');
                }

                // If cart addition successful, remove from wishlist
                const wishlistResponse = await fetch(`/wishlist/remove/${productId}`, {
                    method: 'DELETE'
                });

                const wishlistData = await wishlistResponse.json();

                if (!wishlistResponse.ok) {
                    throw new Error(wishlistData.message || 'Failed to remove from wishlist');
                }

                // Remove item from UI
                const wishlistItem = document.getElementById(`wishlist-item-${productId}`);
                if (wishlistItem) {
                    wishlistItem.style.opacity = '0';
                    wishlistItem.style.transform = 'scale(0.95)';
                    wishlistItem.style.transition = 'all 0.3s ease';

                    setTimeout(() => {
                        wishlistItem.remove();

                        // Update wishlist count
                        const countElements = document.querySelectorAll('#wishlist-count');
                        countElements.forEach(el => {
                            el.textContent = parseInt(el.textContent) - 1;
                        });

                        // Check if wishlist is empty
                        const remainingItems = document.querySelectorAll('[id^="wishlist-item-"]').length;
                        if (remainingItems === 0) {
                            window.location.reload();
                            return;
                        }
                    }, 300);
                }

                showToast('success', 'Success', 'Product added to cart');

            } catch (error) {
                console.error('Operation error:', error);
                showToast('error', 'Error', error.message);
            }
        }

        async function toggleWishlist(productId) {
            try {
                const checkResponse = await fetch(`/wishlist/check/${productId}`);
                const checkData = await checkResponse.json();

                if (checkData.success) {
                    if (checkData.isInWishlist) {
                        const response = await fetch(`/wishlist/remove/${productId}`, {
                            method: 'DELETE'
                        });
                        const data = await response.json();

                        if (data.success) {
                            document.querySelector(`#wishlist-btn-${productId} i`)
                                .classList.replace('fas', 'far');
                            showToast('success', 'Removed from wishlist');
                        }
                    } else {
                        const response = await fetch('/wishlist/add', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ productId })
                        });
                        const data = await response.json();

                        if (data.success) {
                            document.querySelector(`#wishlist-btn-${productId} i`)
                                .classList.replace('far', 'fas');
                            showToast('success', 'Added to wishlist');
                        }
                    }
                }
            } catch (error) {
                console.error('Wishlist toggle error:', error);
                showToast('error', 'Error', 'Error updating wishlist');
            }
        }

        function showUnavailableMessage() {
            showToast('info', 'Product Unavailable', 'This product is currently not available in our store');
        }

        document.addEventListener('DOMContentLoaded', function() {
            const ITEMS_PER_LOAD = 4;
            let visibleItems = ITEMS_PER_LOAD;
            const wishlistGrid = document.getElementById('wishlist-grid');
            const loadMoreBtn = document.getElementById('load-more');
            const totalItems = parseInt(wishlistGrid.getAttribute('data-total-items'));
            let isLoading = false;

            // Show More button for desktop only
            if (loadMoreBtn) {
                loadMoreBtn.classList.add('hidden', 'md:block');
                loadMoreBtn.addEventListener('click', loadMoreItems);
            }

            // Infinite scroll for mobile
            const observer = new IntersectionObserver((entries) => {
                // Only trigger on mobile devices
                if (window.innerWidth >= 768) return;

                entries.forEach(entry => {
                    if (entry.isIntersecting && !isLoading) {
                        loadMoreItems();
                    }
                });
            }, {
                root: null,
                rootMargin: '100px',
                threshold: 0.1
            });

            // Function to load more items
            function loadMoreItems() {
                if (isLoading || visibleItems >= totalItems) return;
                isLoading = true;

                const hiddenItems = document.querySelectorAll('[id^="wishlist-item-"].hidden');
                const itemsToShow = Array.from(hiddenItems).slice(0, ITEMS_PER_LOAD);

                itemsToShow.forEach(item => {
                    item.classList.remove('hidden');
                    item.classList.add('opacity-0');
                    requestAnimationFrame(() => {
                        item.classList.remove('opacity-0');
                        item.classList.add('transition-opacity', 'duration-300');
                    });
                });

                visibleItems += itemsToShow.length;

                // Update observer for the new last item
                updateIntersectionObserver();

                // Hide load more button if all items are shown (desktop only)
                if (visibleItems >= totalItems) {
                    loadMoreBtn?.classList.add('hidden');
                }

                isLoading = false;
            }

            // Update observer target
            function updateIntersectionObserver() {
                // Disconnect previous observations
                observer.disconnect();

                // Find the last visible item
                const visibleItems = document.querySelectorAll('[id^="wishlist-item-"]:not(.hidden)');
                if (visibleItems.length > 0) {
                    const lastItem = visibleItems[visibleItems.length - 1];
                    observer.observe(lastItem);
                }
            }

            // Initial observer setup
            updateIntersectionObserver();

            // Handle window resize
            let lastWidth = window.innerWidth;
            window.addEventListener('resize', () => {
                const newWidth = window.innerWidth;
                const breakpoint = 768;

                // Only handle changes across the mobile/desktop breakpoint
                if ((lastWidth < breakpoint && newWidth >= breakpoint) || 
                    (lastWidth >= breakpoint && newWidth < breakpoint)) {
                    lastWidth = newWidth;
                    updateIntersectionObserver();
                }
            });
        });
    </script>
</body>

</html>