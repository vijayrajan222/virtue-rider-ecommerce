<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Orders - Virtue Rider</title>
    <link rel="stylesheet" href="/tailwindcss/output.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js" defer></script>
    <style>
        .main-wrapper {
            background-image: linear-gradient(135deg, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.5) 100%), url('/images/6331994.jpg');
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
            min-height: 100vh;
        }

        .glass-card {
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(8px);
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .sidebar-link {
            transition: all 0.3s ease;
        }

        .sidebar-link.active {
            background: rgba(255, 255, 255, 0.2);
            border-right: 3px solid white;
        }

        .sidebar-link:hover:not(.active) {
            background: rgba(255, 255, 255, 0.1);
        }
    </style>
</head>

<body>
    <%- include("../partials/nav") %>

    <div class="main-wrapper pt-20">
        <div class="container mx-auto px-4">
            <div class="flex flex-col md:flex-row gap-6 py-8">
                <!-- Sidebar -->
                <div class="md:w-1/4">
                    <div class="glass-card rounded-xl p-6 sticky top-24">
                        <!-- Profile Summary -->
                        <div class="text-center mb-6">
                            <div class="w-24 h-24 mx-auto bg-white/10 rounded-full flex items-center justify-center border-2 border-white/30 mb-4">
                                <i class="fas fa-user text-3xl text-white/90"></i>
                            </div>
                            <h2 class="text-xl font-bold text-white"><%= user.firstname %> <%= user.lastname %></h2>
                            <p class="text-white/70 text-sm">Member since <%= new Date(user.createdAt).toLocaleDateString('en-US', { month: 'long', year: 'numeric' }) %></p>
                        </div>

                        <!-- Navigation Links -->
                        <nav class="space-y-2">
                            <a href="/profile" class="sidebar-link flex items-center gap-3 text-white px-4 py-2.5 rounded-lg">
                                <i class="fas fa-user-circle"></i>
                                <span>Personal Info</span>
                            </a>
                            <a href="/orders" class="sidebar-link active flex items-center gap-3 text-white px-4 py-2.5 rounded-lg">
                                <i class="fas fa-shopping-bag"></i>
                                <span>My Orders</span>
                            </a>
                            <!-- Rest of the sidebar links -->
                            <a href="/address" class="sidebar-link flex items-center gap-3 text-white px-4 py-2.5 rounded-lg">
                                <i class="fas fa-map-marker-alt"></i>
                                <span>Addresses</span>
                            </a>
                            <a href="/wallet" class="sidebar-link flex items-center gap-3 text-white px-4 py-2.5 rounded-lg">
                                <i class="fas fa-wallet"></i>
                                <span>Wallet</span>
                            </a>
                            <a href="/coupons" class="sidebar-link flex items-center gap-3 text-white px-4 py-2.5 rounded-lg">
                                <i class="fas fa-ticket-alt"></i>
                                <span>My Coupons</span>
                            </a>
                            <a href="/wishlist" class="sidebar-link flex items-center gap-3 text-white px-4 py-2.5 rounded-lg">
                                <i class="fas fa-heart"></i>
                                <span>Wishlist</span>
                            </a>
                            <hr class="border-white/20 my-3">
                            <a href="/logout" class="sidebar-link flex items-center gap-3 text-white/90 px-4 py-2.5 rounded-lg hover:bg-red-500/20">
                                <i class="fas fa-sign-out-alt"></i>
                                <span>Logout</span>
                            </a>
                        </nav>
                    </div>
                </div>

                <!-- Main Content -->
                <div class="md:w-3/4">
                    <div class="glass-card rounded-xl p-8">
                        <h2 class="text-2xl font-bold text-white mb-8">My Orders</h2>
                        
                        <% if (orders && orders.length > 0) { %>
                            <div class="space-y-6">
                                <% orders.forEach(order => { %>
                                    <!-- Order Card -->
                                    <div class="glass-card rounded-xl overflow-hidden">
                                        <!-- Order Header -->
                                        <div class="bg-gray-50 p-6 border-b cursor-pointer hover:bg-gray-100 transition-colors"
                                            onclick="toggleOrderDetails('<%= order._id %>')">
                                            <div class="flex flex-wrap justify-between items-center gap-4">
                                                <div>
                                                    <p class="text-sm text-gray-500">Order ID</p>
                                                    <p class="font-medium">#<%= order.orderCode %>
                                                    </p>
                                                </div>

                                                <div>
                                                    <p class="text-sm text-gray-500">Order Date</p>
                                                    <p class="font-medium">
                                                        <%= new Date(order.createdAt).toLocaleDateString('en-US', {
                                                            day: 'numeric' , month: 'short' , year: 'numeric' }) %>
                                                    </p>
                                                </div>
                                                <div>
                                                    <p class="text-sm text-gray-500">Total Amount</p>
                                                    <p class="font-medium">â‚¹<%= order.totalAmount %>
                                                    </p>
                                                </div>
                                                <div>
                                                    <p class="text-sm text-gray-500">Status</p>
                                                    <% // Check if there are products in the order 
                                                        const statusCounts = order.products.length > 0 ? 
                                                          order.products.reduce((acc, item) => {
                                                            acc[item.status] = (acc[item.status] || 0) + 1;
                                                            return acc;
                                                          }, {}) 
                                                        : {}; 

                                                        // Determine the most common status
                                                        const mostCommonStatus = Object.entries(statusCounts)
                                                          .reduce((a, b) => a[1] > b[1] ? a : b, [null, 0])[0] || 'No Status';

                                                        const statusText = mostCommonStatus.charAt(0).toUpperCase() + 
                                                          mostCommonStatus.slice(1);
                                                        %>
                                                        <span class="
                                                inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium
                                                <%= mostCommonStatus === 'delivered' ? 'bg-green-100 text-green-800' :
                                                    mostCommonStatus === 'cancelled' ? 'bg-red-100 text-red-800' :
                                                    mostCommonStatus === 'returned' ? 'bg-orange-100 text-orange-800' :
                                                    mostCommonStatus === 'shipped' ? 'bg-blue-100 text-blue-800' :
                                                    'bg-yellow-100 text-yellow-800'
                                                %>
                                            ">
                                                        <%= statusText %>
                                                    </span>
                                                </div>
                                                <div class="flex items-center">
                                                    <i class="fas fa-chevron-down transform transition-transform"
                                                        id="arrow-<%= order._id %>"></i>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Collapsible Order Details -->
                                        <div class="hidden" id="details-<%= order._id %>">
                                            <!-- Shipping Details -->
                                            <div class="p-6 border-b">
                                                <h3 class="text-lg font-semibold mb-4">Shipping Details</h3>
                                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                    <div>
                                                        <p class="text-sm text-gray-500">Delivered To</p>
                                                        <p class="font-medium">
                                                            <%= order.shippingAddress.fullName%>
                                                        </p>
                                                        <p class="text-sm text-gray-600">
                                                            <%= order.shippingAddress.addressLine1 %><br>
                                                                <%= order.shippingAddress.addressLine2 ?
                                                                    order.shippingAddress.addressLine2 : '' %><br>
                                                                    <%= order.shippingAddress.city %>, <%=
                                                                            order.shippingAddress.state %><br>
                                                                            <%= order.shippingAddress.pincode %>
                                                        </p>
                                                        <p class="text-sm text-gray-600">Phone: <%=
                                                                order.shippingAddress.mobileNumber %>
                                                        </p>
                                                    </div>
                                                    <div>
                                                        <p class="text-sm text-gray-500">Payment Method</p>
                                                        <p class="font-medium">
                                                            <%= order.paymentMethod.toUpperCase() %>
                                                        </p>
                                                        <p class="text-sm text-gray-500 mt-2">Payment Status</p>
                                                        <p class="font-medium">
                                                            <%= order.paymentStatus.charAt(0).toUpperCase() +
                                                                order.paymentStatus.slice(1) %>
                                                        </p>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Order Items -->
                                            <div class="p-6 border-b">
                                                <h3 class="text-lg font-semibold mb-4">Order Items</h3>
                                                <div class="space-y-4">
                                                    <% order.products.forEach(item=> { %>
                                                        <div class="flex items-center gap-4 p-4 border rounded-lg"
                                                            data-order="<%= order._id %>">
                                                            <img src="<%= item.product.images[0] %>"
                                                                alt="<%= item.product.name %>"
                                                                class="w-16 h-16 object-cover rounded">

                                                            <div class="flex-1">
                                                                <p class="font-medium">
                                                                    <%= item.product.name %>
                                                                </p>
                                                                <div class="text-sm text-gray-500">
                                                                    <p>Quantity: <%= item.quantity %></p>
                                                                    <% if (item.offer && item.offer.discountAmount) { %>
                                                                        <p>Price: <span class="line-through">â‚¹<%= item.price %></span> 
                                                                           â‚¹<%= item.price - item.offer.discountAmount %></p>
                                                                    <% } else { %>
                                                                        <p>Price: â‚¹<%= item.price %></p>
                                                                    <% } %>
                                                                    <% if (item.variantInfo && item.variantInfo.size) { %>
                                                                        <p>Size: <%= item.variantInfo.size %></p>
                                                                    <% } %>
                                                                </div>
                                                            </div>

                                                            <!-- Status and Actions -->
                                                            <div class="flex flex-col gap-2 w-full sm:w-auto sm:items-end">
                                                                <!-- Status Badge -->
                                                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium
                                                            <%= item.status === 'delivered' ? 'bg-green-100 text-green-800' :
                                                                item.status === 'cancelled' ? 'bg-red-100 text-red-800' :
                                                                item.status === 'returned' ? 'bg-orange-100 text-orange-800' :
                                                                item.status === 'shipped' ? 'bg-blue-100 text-blue-800' :
                                                                'bg-yellow-100 text-yellow-800'
                                                            %>">
                                                                        <%= item.status.charAt(0).toUpperCase() +
                                                                            item.status.slice(1) %>
                                                                    </span>

                                                                <!-- Action Buttons -->
                                                                <div class="flex flex-col sm:flex-row gap-2">
                                                                    <% if (item.status==='delivered' ) { %>
                                                                        <button
                                                                            onclick="downloadInvoice('<%= order._id %>', '<%= item.product._id %>')"
                                                                            class="px-3 py-1 text-sm bg-zinc-800 text-white rounded hover:bg-zinc-700 transition-colors">
                                                                            <i class="fas fa-file-pdf mr-1"></i>
                                                                            Invoice
                                                                        </button>
                                                                        <% } %>

                                                                            <% if (item.status==='pending' ||
                                                                                item.status==='processing' ) { %>
                                                                                <% if (order.paymentStatus !=='failed' ) {
                                                                                    %>
                                                                                    <button
                                                                                        onclick="cancelOrderItem('<%= order._id %>', '<%= item.product._id %>', '<%= item.product.name %>')"
                                                                                        class="px-3 py-1 text-sm bg-red-600 text-white rounded hover:bg-red-700 transition-colors">
                                                                                        Cancel
                                                                                    </button>
                                                                                    <% } %>
                                                                                        <% } %>

                                                                                            <% if (item.status==='delivered'
                                                                                                && !item.isReturnRequested)
                                                                                                { %>
                                                                                                <button
                                                                                                    onclick="requestReturnForItem('<%= order._id %>', '<%= item.product._id %>', '<%= item.product.name %>')"
                                                                                                    class="px-3 py-1 text-sm bg-orange-600 text-white rounded hover:bg-orange-700 transition-colors">
                                                                                                    Return
                                                                                                </button>
                                                                                                <% } %>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <% }); %>
                                                </div>
                                            </div>

                                            <!-- Order Summary -->
                                            <div class="p-6 border-b">
                                                <h3 class="text-lg font-semibold mb-4">Order Summary</h3>
                                                <div class="space-y-2">
                                                    <div class="flex justify-between text-gray-600">
                                                        <span>Subtotal:</span>
                                                        <span>â‚¹<%= order.subtotal %></span>
                                                    </div>
                                                    
                                                    <% if (order.coupon && order.coupon.code) { %>
                                                        <div class="flex justify-between text-gray-600">
                                                            <span>Coupon Applied (<%= order.coupon.code %>):</span>
                                                            <span class="text-green-600">-â‚¹<%= order.coupon.discount %></span>
                                                        </div>
                                                    <% } %>

                                                    <!-- You can add shipping charges here if applicable -->
                                                    <div class="flex justify-between font-semibold text-lg mt-4">
                                                        <span>Total Amount:</span>
                                                        <span>â‚¹<%= order.totalAmount %></span>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Action Buttons -->
                                            <div class="p-6 flex justify-end gap-4">
                                                <% if (order.products.every(item => 
                                                  ['delivered', 'returned', 'refund processing'].includes(item.status))) { %>
                                                    <% } %>

                                                        <% if (order.paymentMethod === 'online' && 
                                                              order.paymentStatus === 'pending' && 
                                                              !order.products.every(item => item.status === 'cancelled')) { %>
                                                            <button 
                                                                onclick="retryPayment('<%= order._id %>', <%= order.totalAmount %>)"
                                                                class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2"
                                                            >
                                                                <i class="fas fa-redo"></i>
                                                                Retry Payment (â‚¹<%= order.totalAmount %>)
                                                            </button>
                                                        <% } %>
                                            </div>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>

                            <!-- Pagination -->
                            <% if (totalPages > 1) { %>
                                <div class="mt-8 flex justify-center">
                                    <div class="flex gap-2">
                                        <% if (currentPage > 1) { %>
                                            <a href="/orders?page=<%= currentPage - 1 %>" 
                                               class="px-4 py-2 glass-card rounded-lg text-white hover:bg-white/20 transition-all">
                                                <i class="fas fa-chevron-left"></i>
                                            </a>
                                        <% } %>

                                        <% for(let i = 1; i <= totalPages; i++) { %>
                                            <a href="/orders?page=<%= i %>" 
                                               class="px-4 py-2 glass-card rounded-lg text-white 
                                                      <%= currentPage === i ? 'bg-white/30' : 'hover:bg-white/20' %> 
                                                      transition-all">
                                                <%= i %>
                                            </a>
                                        <% } %>

                                        <% if (currentPage < totalPages) { %>
                                            <a href="/orders?page=<%= currentPage + 1 %>" 
                                               class="px-4 py-2 glass-card rounded-lg text-white hover:bg-white/20 transition-all">
                                                <i class="fas fa-chevron-right"></i>
                                            </a>
                                        <% } %>
                                    </div>
                                </div>
                            <% } %>
                        <% } else { %>
                            <div class="text-center py-12">
                                <div class="text-white/40 mb-4">
                                    <i class="fas fa-shopping-bag text-4xl"></i>
                                </div>
                                <h3 class="text-lg font-medium text-white mb-2">No orders yet</h3>
                                <p class="text-white/60">Start shopping to see your orders here</p>
                                <a href="/shop" class="inline-block mt-6 px-6 py-3 bg-white text-black rounded-lg hover:bg-opacity-90 transition-colors">
                                    Browse Products
                                </a>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- First add the alert modal HTML structure -->
    <div id="alertModal" class="fixed inset-0 bg-black/50 z-50 hidden">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-xl w-full max-w-sm p-6 transform transition-all">
                <!-- Success Alert -->
                <div id="successAlert" class="hidden text-center">
                    <div class="mb-4">
                        <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100">
                            <i class="fas fa-check text-xl text-green-600"></i>
                        </div>
                    </div>
                    <h3 class="text-lg font-semibold text-gray-900 mb-2">Success</h3>
                    <p id="successMessage" class="text-gray-600 mb-6"></p>
                    <button onclick="hideAlert()"
                        class="w-full px-6 py-2.5 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors">
                        Continue
                    </button>
                </div>

                <!-- Error Alert -->
                <div id="errorAlert" class="hidden text-center">
                    <div class="mb-4">
                        <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
                            <i class="fas fa-times text-xl text-red-600"></i>
                        </div>
                    </div>
                    <h3 class="text-lg font-semibold text-gray-900 mb-2">Error</h3>
                    <p id="errorMessage" class="text-gray-600 mb-6"></p>
                    <button onclick="hideAlert()"
                        class="w-full px-6 py-2.5 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors">
                        Try Again
                    </button>
                </div>

                <!-- Loading Alert -->
                <div id="loadingAlert" class="hidden text-center">
                    <div class="mb-4">
                        <div class="mx-auto flex items-center justify-center h-12 w-12">
                            <div class="animate-spin rounded-full h-8 w-8 border-4 border-gray-200 border-t-black">
                            </div>
                        </div>
                    </div>
                    <h3 class="text-lg font-semibold text-gray-900">Processing</h3>
                    <p class="text-gray-600">Please wait...</p>
                </div>

                <!-- Confirm Alert -->
                <div id="confirmAlert" class="hidden text-center">
                    <div class="mb-4">
                        <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-yellow-100">
                            <i class="fas fa-question text-xl text-yellow-600"></i>
                        </div>
                    </div>
                    <h3 id="confirmTitle" class="text-lg font-semibold text-gray-900 mb-2"></h3>
                    <p id="confirmMessage" class="text-gray-600 mb-6"></p>
                    <div class="flex gap-3">
                        <button onclick="hideAlert()"
                            class="flex-1 px-6 py-2.5 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors">
                            Cancel
                        </button>
                        <button id="confirmAction"
                            class="flex-1 px-6 py-2.5 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors">
                            Confirm
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <%- include("../partials/footer") %>

    <script>
        function toggleOrderDetails(orderId) {
            const detailsDiv = document.getElementById(`details-${orderId}`);
            const arrow = document.getElementById(`arrow-${orderId}`);

            detailsDiv.classList.toggle('hidden');
            arrow.classList.toggle('rotate-180');
        }

        // Helper function to update UI status
        function updateOrderUI(orderId, status, reason) {
            const statusBadges = document.querySelectorAll(`[data-order="${orderId}"] .status-badge`);
            const actionButtons = document.querySelectorAll(`[data-order="${orderId}"] .action-buttons`);

            // Update status badges
            statusBadges.forEach(badge => {
                badge.textContent = status.charAt(0).toUpperCase() + status.slice(1);

                // Update badge colors
                const colorClasses = {
                    'delivered': 'bg-green-100 text-green-800',
                    'cancelled': 'bg-red-100 text-red-800',
                    'returned': 'bg-orange-100 text-orange-800',
                    'shipped': 'bg-blue-100 text-blue-800',
                    'processing': 'bg-yellow-100 text-yellow-800'
                };

                // Remove existing color classes
                Object.values(colorClasses).forEach(cls => {
                    badge.classList.remove(...cls.split(' '));
                });

                // Add new color class
                badge.classList.add(...colorClasses[status].split(' '));
            });

            // Add new timeline entry
            const timelineContainer = document.querySelector(`[data-order="${orderId}"] .timeline-container`);
            if (timelineContainer) {
                const newEntry = document.createElement('div');
                newEntry.className = 'flex items-start gap-4';
                newEntry.innerHTML = `
                <div class="w-2 h-2 mt-2 rounded-full ${status === 'cancelled' ? 'bg-red-500' :
                            status === 'delivered' ? 'bg-green-500' :
                                status === 'returned' ? 'bg-orange-500' :
                                    'bg-gray-400'
                        }"></div>
                <div>
                    <p class="font-medium">${status.charAt(0).toUpperCase() + status.slice(1)}</p>
                    <p class="text-sm text-gray-500">${new Date().toLocaleString()}</p>
                    ${reason ? `<p class="text-sm text-gray-600">${reason}</p>` : ''}
                </div>
            `;
                timelineContainer.insertBefore(newEntry, timelineContainer.firstChild);
            }

            // Update action buttons visibility
            actionButtons.forEach(buttonContainer => {
                buttonContainer.innerHTML = getActionButtonsHTML(status);
            });
        }

        // Helper function to get action buttons HTML based on status
        function getActionButtonsHTML(status) {
            if (['delivered'].includes(status)) {
                return `
                <button onclick="requestReturn(orderId)" 
                        class="px-3 py-1 text-sm bg-orange-600 text-white rounded hover:bg-orange-700 transition-colors">
                    Return
                </button>`;
            }
            return '';
        }

        async function cancelOrder(orderId) {
            // Show confirm dialog with select input
            const select = document.createElement('select');
            select.className = 'mt-4 w-full rounded border-gray-300';
            select.innerHTML = `
                <option value="">Select a reason</option>
                <option value="Changed my mind">Changed my mind</option>
                <option value="Found better price elsewhere">Found better price elsewhere</option>
                <option value="Ordered by mistake">Ordered by mistake</option>
                <option value="Other">Other</option>
            `;

            const confirmMessage = document.getElementById('confirmMessage');
            confirmMessage.textContent = 'Please select a reason for cancellation';
            confirmMessage.appendChild(select);

            showAlert('confirm', '', 'Cancel Order');

            document.getElementById('confirmAction').onclick = async () => {
                const reason = select.value;
                if (!reason) {
                    showAlert('error', 'Please select a reason');
                    return;
                }

                try {
                    hideAlert();
                    showAlert('loading');

                    const response = await fetch(`/orders/${orderId}/cancel`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ reason })
                    });

                    const data = await response.json();
                    hideAlert();

                    if (response.ok) {
                        updateOrderUI(orderId, 'cancelled', reason);
                        showAlert('success', data.message);
                    } else {
                        throw new Error(data.message);
                    }
                } catch (error) {
                    hideAlert();
                    showAlert('error', error.message || 'Failed to cancel order');
                }
            };
        }

        async function requestReturn(orderId) {
            // Show confirm dialog with select input
            const select = document.createElement('select');
            select.className = 'mt-4 w-full rounded border-gray-300';
            select.innerHTML = `
                <option value="">Select a reason</option>
                <option value="Product damaged">Product damaged</option>
                <option value="Wrong product received">Wrong product received</option>
                <option value="Product not as described">Product not as described</option>
                <option value="Size/fit issue">Size/fit issue</option>
                <option value="Quality not as expected">Quality not as expected</option>
                <option value="Other">Other</option>
            `;

            const confirmMessage = document.getElementById('confirmMessage');
            confirmMessage.textContent = 'Please select a reason for return';
            confirmMessage.appendChild(select);

            showAlert('confirm', '', 'Return Order');

            document.getElementById('confirmAction').onclick = async () => {
                const reason = select.value;
                if (!reason) {
                    showAlert('error', 'Please select a reason');
                    return;
                }

                try {
                    hideAlert();
                    showAlert('loading');

                    const response = await fetch(`/orders/${orderId}/return`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ reason })
                    });

                    const data = await response.json();
                    hideAlert();

                    if (response.ok) {
                        showAlert('success', data.message, 'Return Requested');
                        // Add reload after success alert is closed
                        document.querySelector('#successAlert button').onclick = () => {
                            hideAlert();
                            window.location.reload();
                        };
                    } else {
                        throw new Error(data.message);
                    }
                } catch (error) {
                    hideAlert();
                    showAlert('error', error.message || 'Failed to request return');
                }
            };
        }

        async function downloadInvoice(orderId, productId) {
            try {
                showAlert('loading');
                const response = await fetch(`/orders/${orderId}/items/${productId}/invoice`, {
                    method: 'GET'
                });

                if (!response.ok) {
                    throw new Error('Failed to generate invoice');
                }

                // Create a blob from the PDF stream
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);

                // Create a temporary link and trigger download
                const a = document.createElement('a');
                a.href = url;
                a.download = `invoice-${orderId}-${productId}.pdf`;
                document.body.appendChild(a);
                a.click();

                // Cleanup
                window.URL.revokeObjectURL(url);
                a.remove();
                hideAlert();

                showAlert('success', 'Invoice downloaded successfully');
            } catch (error) {
                console.error('Invoice download error:', error);
                hideAlert();
                showAlert('error', 'Failed to download invoice');
            }
        }

        async function retryPayment(orderId, amount) {
            try {
                const response = await fetch(`/orders/${orderId}/retry-payment`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();
                if (!data.success) {
                    throw new Error(data.message || 'Failed to initiate payment');
                }

                const options = {
                    key: data.key,
                    amount: data.amount * 100, // amount in paisa
                    currency: "INR",
                    name: "LISTEN",
                    description: "Order Payment Retry",
                    order_id: data.order.id,
                    handler: async function (response) {
                        try {
                            showAlert('loading', 'Verifying payment...');
                            const verifyResponse = await fetch('/checkout/verify-payment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_signature: response.razorpay_signature,
                                    orderId: orderId,
                                    status: 'success'
                                })
                            });

                            const verifyData = await verifyResponse.json();
                            if (verifyData.success) {
                                hideAlert();
                                await showAlert('success', 'Payment successful!');
                                window.location.reload();
                            } else {
                                throw new Error(verifyData.message || 'Payment verification failed');
                            }
                        } catch (error) {
                            hideAlert();
                            console.error('Payment verification error:', error);
                            showAlert('error', error.message || 'Payment verification failed');
                        }
                    },
                    modal: {
                        ondismiss: async function() {
                            showAlert('info', 'Payment cancelled. You can retry payment later.');
                        }
                    },
                    prefill: {
                        name: "<%= user.firstName %> <%= user.lastName %>",
                        email: "<%= user.email %>",
                        contact: "<%= user.phone %>"
                    },
                    theme: {
                        color: "#000000"
                    }
                };

                const rzp = new Razorpay(options);
                rzp.open();

            } catch (error) {
                console.error('Payment retry error:', error);
                showAlert('error', error.message || 'Failed to retry payment');
            }
        }

        // Helper functions to update UI
        function updatePaymentUI(orderId, status) {
            const paymentStatusElement = document.querySelector(`[data-order="${orderId}"] .payment-status`);
            if (paymentStatusElement) {
                paymentStatusElement.textContent = status.charAt(0).toUpperCase() + status.slice(1);
            }
        }

        function hideRetryPaymentButton(orderId) {
            const retryButton = document.querySelector(`[data-order="${orderId}"] button[onclick*="retryPayment"]`);
            if (retryButton) {
                retryButton.remove();
            }
        }

        function updateOrderStatus(orderId, status) {
            // Update status badge for all items
            const statusBadges = document.querySelectorAll(`[data-order="${orderId}"] .status-badge`);
            const statusText = status.charAt(0).toUpperCase() + status.slice(1);

            statusBadges.forEach(badge => {
                badge.textContent = statusText;

                // Update badge colors
                badge.className = `status-badge px-2 py-1 text-sm rounded-full ${status === 'processing' ? 'bg-yellow-100 text-yellow-800' :
                        status === 'delivered' ? 'bg-green-100 text-green-800' :
                            status === 'cancelled' ? 'bg-red-100 text-red-800' :
                                status === 'returned' ? 'bg-orange-100 text-orange-800' :
                                    'bg-yellow-100 text-yellow-800'
                        }`;
            });

            // Update main order status if exists
            const mainStatusBadge = document.querySelector(`[data-order="${orderId}"] .order-status-badge`);
            if (mainStatusBadge) {
                mainStatusBadge.textContent = statusText;
                mainStatusBadge.className = `order-status-badge inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${status === 'processing' ? 'bg-yellow-100 text-yellow-800' :
                        status === 'delivered' ? 'bg-green-100 text-green-800' :
                            status === 'cancelled' ? 'bg-red-100 text-red-800' :
                                status === 'returned' ? 'bg-orange-100 text-orange-800' :
                                    'bg-yellow-100 text-yellow-800'
                        }`;
            }
        }

        // Alert handling functions
        function showAlert(type, message = '', title = '') {
            const modal = document.getElementById('alertModal');
            const alerts = ['successAlert', 'errorAlert', 'loadingAlert', 'confirmAlert'];

            alerts.forEach(alert => {
                document.getElementById(alert).classList.add('hidden');
            });

            const alertElement = document.getElementById(`${type}Alert`);
            alertElement.classList.remove('hidden');

            if (message) {
                if (type === 'error') {
                    document.getElementById('errorMessage').textContent = message;
                } else if (type === 'success') {
                    document.getElementById('successMessage').textContent = message;
                    // Add click handler for success alert's continue button
                    const continueBtn = alertElement.querySelector('button');
                    continueBtn.onclick = () => {
                        hideAlert();
                        window.location.reload();
                    };
                } else if (type === 'confirm') {
                    document.getElementById('confirmMessage').textContent = message;
                    if (title) document.getElementById('confirmTitle').textContent = title;
                }
            }

            modal.classList.remove('hidden');
        }

        function hideAlert() {
            document.getElementById('alertModal').classList.add('hidden');
        }

        async function requestReturnForItem(orderId, productId, productName) {
            const reasons = {
                'defective': 'Product is defective',
                'wrong_item': 'Received wrong item',
                'not_as_described': 'Item not as described',
                'size_issue': 'Size/fit issue',
                'other': 'Other reason'
            };

            const select = document.createElement('select');
            select.className = 'mt-4 w-full rounded border-gray-300';
            select.innerHTML = `
                <option value="">Select a reason</option>
                ${Object.entries(reasons).map(([key, value]) =>
                        `<option value="${key}">${value}</option>`
                    ).join('')}
            `;

            const confirmMessage = document.getElementById('confirmMessage');
            confirmMessage.textContent = 'Please select a reason for return';
            confirmMessage.appendChild(select);

            showAlert('confirm', '', `Return ${productName}`);

            document.getElementById('confirmAction').onclick = async () => {
                const reason = select.value;
                if (!reason) {
                    showAlert('error', 'Please select a reason');
                    return;
                }

                try {
                    hideAlert();
                    showAlert('loading');

                    const response = await fetch(`/orders/${orderId}/items/${productId}/return`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ reason })
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Failed to submit return request');
                    }

                    const data = await response.json();
                    hideAlert();
                    showAlert('success', 'Return request submitted successfully');
                    setTimeout(() => window.location.reload(), 2000);

                } catch (error) {
                    hideAlert();
                    showAlert('error', error.message || 'Failed to request return');
                }
            };
        }

        async function cancelOrderItem(orderId, productId, productName) {
            const select = document.createElement('select');
            select.className = 'mt-4 w-full rounded border-gray-300';
            select.innerHTML = `
                <option value="">Select a reason</option>
                <option value="Changed my mind">Changed my mind</option>
                <option value="Found better price elsewhere">Found better price elsewhere</option>
                <option value="Ordered by mistake">Ordered by mistake</option>
                <option value="Other">Other</option>
            `;

            const confirmMessage = document.getElementById('confirmMessage');
            confirmMessage.textContent = 'Please select a reason for cancellation';
            confirmMessage.appendChild(select);

            showAlert('confirm', '', 'Cancel Order');

            document.getElementById('confirmAction').onclick = async () => {
                const reason = select.value;
                if (!reason) {
                    showAlert('error', 'Please select a reason');
                    return;
                }

                try {
                    hideAlert();
                    showAlert('loading');

                    const response = await fetch(`/orders/${orderId}/items/${productId}/cancel`, {
                        method: 'PATCH',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ reason })
                    });

                    // Check if the response is OK (status in the range 200-299)
                    if (!response.ok) {
                        const errorText = await response.text(); // Get the response text
                        throw new Error(errorText); // Throw an error with the response text
                    }

                    const data = await response.json(); // Parse the JSON response
                    hideAlert();

                    updateOrderUI(orderId, 'cancelled', reason);
                    showAlert('success', data.message);
                } catch (error) {
                    hideAlert();
                    showAlert('error', error.message || 'Failed to cancel order');
                }
            };
        }
    </script>
</body>

</html>