<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Shop | VIRTUE</title>
    <link rel="stylesheet" href="/tailwindcss/output.css">
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
      integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
      .product-card {
        position: relative;
        perspective: 1000px;
        transform-style: preserve-3d;
        cursor: pointer;
      }

      .product-image-container {
        position: relative;
        border-radius: 1rem;
        overflow: hidden;
        background: white;
        transform-style: preserve-3d;
        transition: all 0.6s cubic-bezier(0.23, 1, 0.32, 1);
      }

      .product-card:hover .product-image-container {
        transform: translateZ(20px) rotateX(10deg) rotateY(10deg);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1), 0 15px 40px rgba(0,0,0,0.05);
      }

      .product-image {
        position: relative;
        aspect-ratio: 1;
        width: 100%;
        object-fit: cover;
        transform-style: preserve-3d;
        transition: transform 0.6s cubic-bezier(0.23, 1, 0.32, 1);
      }

      .product-card:hover .product-image {
        transform: translateZ(10px) scale(1.05);
      }

      .shine-effect {
        position: absolute;
        inset: 0;
        background: linear-gradient(125deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0) 40%, rgba(255,255,255,0.3) 50%, rgba(255,255,255,0) 60%, rgba(255,255,255,0) 100%);
        opacity: 0;
        transition: all 0.6s cubic-bezier(0.23, 1, 0.32, 1);
        pointer-events: none;
        mix-blend-mode: soft-light;
      }

      .product-card:hover .shine-effect {
        opacity: 1;
        transform: translateZ(30px);
      }

      .product-info {
        position: relative;
        background: white;
        margin-top: 1rem;
        padding: 1rem;
        border-radius: 0.75rem;
        transform: translateZ(10px);
        transition: all 0.6s cubic-bezier(0.23, 1, 0.32, 1);
      }

      .product-card:hover .product-info {
        transform: translateZ(40px);
      }

      /* Add smooth transitions */
      button, select, input {
        transition: all 0.2s ease;
      }
      /* Custom scrollbar */
      ::-webkit-scrollbar {
        width: 8px;
      }
      ::-webkit-scrollbar-track {
        background: #f1f1f1;
      }
      ::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 4px;
      }
      ::-webkit-scrollbar-thumb:hover {
        background: #555;
      }
    </style>
  </head>

  <body class="bg-gray-50">
    <%- include("../partials/nav") %>

    <!-- Hero Section - Updated design -->
    <section class="relative h-[500px]">
      <div class="absolute inset-0">
        <img src="/images/Helmet.jpg" alt="Shop Banner" 
             class="w-full h-full object-cover object-center brightness-75">
        <div class="absolute inset-0 bg-gradient-to-r from-black/80 via-black/50 to-transparent"></div>
      </div>
      <div class="relative h-full flex items-center">
        <div class="container mx-auto px-8">
          <div class="max-w-xl">
            <h1 class="text-6xl md:text-7xl text-white font-bold mb-6 leading-tight">
              Premium Collection
            </h1>
            <p class="text-xl text-white/90 mb-10 max-w-md font-light leading-relaxed">
              Discover our exclusive range of premium motorcycle helmets designed for the modern rider.
            </p>
            <button class="bg-white text-black px-10 py-4 rounded-lg text-lg font-medium 
                         hover:bg-opacity-90 transition-all duration-300 shadow-xl hover:shadow-2xl
                         transform hover:scale-105">
              Explore Collection
            </button>
          </div>
        </div>
      </div>
    </section>

    <!-- Main Content -->
    <div class="bg-gray-50 min-h-screen">
      <div class="container mx-auto px-4 sm:px-6 lg:px-8 max-w-[1600px]">
        <div class="flex flex-col lg:flex-row gap-8 py-12">

          <!-- Left Sidebar - Filters -->
          <div class="lg:w-[300px] shrink-0">
            <div class="sticky top-6 bg-white p-6 rounded-2xl shadow-lg border border-gray-100">
              <h3 class="text-xl font-semibold text-gray-900 mb-6">Filters</h3>
              
              <!-- Filter Options -->
              <div class="space-y-6">
                <div>
                  <label class="block text-gray-700 font-medium mb-3">Sort By</label>
                  <select id="sortFilter" class="w-full px-4 py-3 border border-gray-200 rounded-xl text-sm
                                               focus:ring-2 focus:ring-gray-900 focus:border-gray-900
                                               bg-gray-50 hover:bg-gray-100 transition-colors">
                    <option value="default">Default</option>                                                                               
                    <option value="newArrivals">New Arrivals</option>
                    <option value="priceLowToHigh">Price: Low to High</option>
                    <option value="priceHighToLow">Price: High to Low</option>
                    <option value="ratingHighToLow">Rating: High to Low</option>
                    <option value="nameAZ">Name: A to Z</option>
                    <option value="nameZA">Name: Z to A</option>
                    <option value="popularity">Most Popular</option>
                  </select>
                </div>

                <div>
                  <label for="color" class="block text-gray-700 font-medium mb-3">Colour</label>
                  <select id="color" class="w-full px-4 py-3 border border-gray-200 rounded-xl text-sm
                                               focus:outline-none focus:border-2 focus:border-gray-900
                                               bg-gray-50 hover:bg-gray-100 transition-colors">
                    <option value="">All</option>
                  </select>
                </div>

                <div>
                  <label class="block text-gray-700 font-medium mb-3">Price Range</label>
                  <div class="flex gap-2">
                    <input type="number" id="minPrice" placeholder="Min" class="w-full px-4 py-3 border border-gray-200 rounded-xl text-sm focus:outline-none focus:border-2 focus:border-gray-900 bg-gray-50 hover:bg-gray-100 transition-colors">
                    <input type="number" id="maxPrice" placeholder="Max" class="w-full px-4 py-3 border border-gray-200 rounded-xl text-sm focus:outline-none focus:border-2 focus:border-gray-900 bg-gray-50 hover:bg-gray-100 transition-colors">
                  </div>
                </div>

                <div class="mb-6">
                  <label for="category" class="block text-gray-700 font-medium">Category</label>
                  <select id="category" class="w-full px-4 py-3 border border-gray-200 rounded-xl text-sm
                                               focus:outline-none focus:border-2 focus:border-gray-900
                                               bg-gray-50 hover:bg-gray-100 transition-colors">
                    <script>
                      console.log("Categories in EJS:", <%- JSON.stringify(categories) %>);
                    </script>
                    <option value="">All Categories</option>
                    <% if (typeof categories !== "undefined" && categories.length > 0) { %>
                      <% categories.forEach(category => { %>
                        <option value="<%= category._id %>"><%= category.name %></option>
                      <% }); %>
                    <% } else { %>
                      <option value="">No Categories Available</option>
                    <% } %>
                  </select>
                </div>

                <div class="border-t border-gray-100 my-6"></div>
                <button id="resetButton" 
                        class="w-full px-4 py-3.5 bg-gray-900 text-white rounded-xl hover:bg-gray-800 
                               transition-all duration-300 text-sm font-medium hover:shadow-lg
                               transform hover:scale-[1.02]">
                  Reset All Filters
                </button>
              </div>
            </div>
          </div>

          <!-- Right Side Content -->
          <div class="lg:flex-1">
            <!-- Search Bar -->
            <div class="mb-8">
              <div class="flex items-center">
                <input type="text" id="searchInput" 
                       class="flex-1 h-14 px-6 border border-gray-200 rounded-l-xl text-base 
                              placeholder:text-gray-400 focus:ring-2 focus:ring-gray-900 focus:border-gray-900
                              bg-white shadow-sm"
                       placeholder="Search for products...">
                <button id="searchButton" 
                        class="h-14 px-10 bg-gray-900 text-white rounded-r-xl hover:bg-gray-800 
                               transition-all duration-300 font-medium hover:shadow-lg">
                  Search
                </button>
              </div>
            </div>

            <!-- Product Grid -->
            <div id="productGrid" class="grid grid-cols-2 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
              <% if (products && products.length > 0) { %>
                <% products.forEach(product => { %>
                  <div class="product-card bg-white rounded-xl overflow-hidden shadow-sm hover:shadow-lg">
                    <a href="/product/<%= product._id %>">
                      <div class="product-image-container">
                        <img src="<%= product.images[0] %>" 
                             alt="<%= product.name %>"
                             class="product-image w-full h-full object-cover"
                             loading="lazy">
                        
                        <div class="shine-effect"></div>
                        
                        <% if (product.offer) { %>
                          <div class="absolute top-3 right-3 bg-red-500 text-white px-3 py-1.5 rounded-full text-xs font-semibold shadow-md">
                            <%= product.offer.discountAmount %><%= product.offer.discountType === 'percentage' ? '%' : '₹' %> OFF
                          </div>
                        <% } %>
                      </div>
                    </a>

                    <!-- Product Info -->
                    <div class="product-info">
                      <h2 class="text-gray-800 text-base font-medium line-clamp-2 min-h-[2.5rem]">
                        <%= product.name %>
                      </h2>

                      <!-- Price and Offer -->
                      <div class="flex items-baseline gap-2">
                        <% if (product.offer) { %>
                          <span class="text-xl font-bold text-gray-900">₹<%= product.offer.discountedPrice.toFixed(2) %></span>
                          <span class="text-sm text-gray-500 line-through">₹<%= product.price %></span>
                        <% } else { %>
                          <span class="text-xl font-bold text-gray-900">₹<%= product.price %></span>
                        <% } %>
                      </div>

                      <!-- Variants and Add to Cart -->
                      <% if (product.variants && product.variants.some(v => v.stock > 0)) { %>
                        <div class="mt-4 space-y-3">
                          <select id="variant-<%= product._id %>" 
                                  class="w-full px-4 py-2.5 border border-gray-200 rounded-lg text-sm 
                                         focus:ring-2 focus:ring-gray-900 focus:border-gray-900">
                            <% product.variants.forEach(variant => { %>
                              <option value="<%= variant._id %>" <%= variant.stock === 0 ? 'disabled' : '' %>>
                                <%= variant.size %> (<%= variant.stock %> available)
                              </option>
                            <% }); %>
                          </select>
                          <button 
                            onclick="addToCart('<%= product._id %>')"
                            class="w-full py-3 bg-gray-900 text-white text-sm font-medium rounded-lg hover:bg-gray-800 transition-all duration-300">
                            Add to Cart
                          </button>
                        </div>
                      <% } %>
                    </div>
                  </div>
                <% }); %>
              <% } else { %>
                <div class="col-span-full text-center py-8">
                  <p class="text-gray-500">No products found</p>
                </div>
              <% } %>
            </div>

            <!-- Pagination -->
            <div class="mt-16 flex justify-center items-center gap-8">
              <button id="prevPage" 
                      class="px-8 py-3 bg-gray-900 text-white rounded-xl hover:bg-gray-800 
                             transition-all duration-300 disabled:opacity-50 disabled:hover:bg-gray-900
                             hover:shadow-lg transform hover:scale-[1.02]">
                Previous
              </button>
              <span class="text-gray-700 font-medium">
                Page <span id="currentPage" class="font-bold">1</span> of <span id="totalPages" class="font-bold">1</span>
              </span>
              <button id="nextPage" 
                      class="px-8 py-3 bg-gray-900 text-white rounded-xl hover:bg-gray-800 
                             transition-all duration-300 disabled:opacity-50 disabled:hover:bg-gray-900
                             hover:shadow-lg transform hover:scale-[1.02]">
                Next
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <%- include("../partials/footer") %>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
          // Cache DOM elements
          const productGrid = document.getElementById('productGrid');
          const searchInput = document.getElementById('searchInput');
          const searchButton = document.getElementById('searchButton');
          const sortFilter = document.getElementById('sortFilter');
          const colorFilter = document.getElementById('color');
          const minPriceFilter = document.getElementById('minPrice');
          const maxPriceFilter = document.getElementById('maxPrice');
          const resetButton = document.getElementById('resetButton');
          const prevPageBtn = document.getElementById('prevPage');
          const nextPageBtn = document.getElementById('nextPage');
          const currentPageSpan = document.getElementById('currentPage');
          const categoriesSelect = document.getElementById('category');
          const totalPagesSpan = document.getElementById('totalPages');
      
          // Store original products data
          let products = <%- JSON.stringify(products) %>;
          const originalProducts = [...products];
      
          // Function to show loading state
          function showLoading() {
              productGrid.innerHTML = `
                  <div class="col-span-full flex justify-center py-8">
                      <div class="loading-spinner"></div>
                  </div>
              `;
          }
      
          // Function to apply all filters
          async function applyFilters() {
              currentPage = 1; // Reset to first page when filters change
              await fetchProducts(currentPage);
          }
      
          // Enhanced function to render products
          function renderProducts(productsToRender) {
              if (!productsToRender || productsToRender.length === 0) {
                  return `
                      <div class="col-span-full text-center py-8">
                          <p class="text-gray-500">No products found matching your criteria</p>
                      </div>
                  `;
              }
      
              return productsToRender.map(product => {
                  const hasStock = product.variants && product.variants.some(v => v.stock > 0);
                  
                  return `
                      <div class="product-card bg-white rounded-xl overflow-hidden shadow-sm hover:shadow-lg">
                          <a href="/product/${product._id}" class="block">
                              <div class="product-image-container">
                                  ${product.images && product.images.length > 0 ? `
                                      <img 
                                          src="${product.images[0]}" 
                                          alt="${product.name}"
                                          class="product-image w-full h-full object-cover ${!hasStock ? 'opacity-60' : ''}"
                                          loading="lazy"
                                      >
                                  ` : ''}
                                  
                                  <div class="shine-effect"></div>
                                  
                                  ${!hasStock ? `
                                      <div class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50">
                                          <span class="text-white px-3 py-1.5 rounded-full text-sm font-medium">
                                              Out of Stock
                                          </span>
                                      </div>
                                  ` : ''}

                                  ${product.offer ? `
                                      <div class="absolute top-3 right-3 bg-red-500 text-white px-3 py-1.5 rounded-full text-xs font-semibold shadow-md">
                                          ${product.offer.discountAmount}${product.offer.discountType === 'percentage' ? '%' : '₹'} OFF
                                      </div>
                                  ` : ''}
                              </div>
                          </a>

                          <div class="product-info">
                              <h2 class="text-gray-800 text-base font-medium line-clamp-2 min-h-[2.5rem]">
                                  ${product.name}
                              </h2>

                              <div class="flex items-baseline gap-2">
                                  ${product.offer ? `
                                      <span class="text-xl font-bold text-gray-900">₹${product.offer.discountedPrice.toFixed(2)}</span>
                                      <span class="text-sm text-gray-500 line-through">₹${product.price}</span>
                                  ` : `
                                      <span class="text-xl font-bold text-gray-900">₹${product.price}</span>
                                  `}
                              </div>
                              
                              ${hasStock && product.variants && product.variants.length > 0 ? `
                                  <div class="mt-4 space-y-3">
                                      <select id="variant-${product._id}" class="w-full px-4 py-2.5 border border-gray-200 rounded-lg text-sm 
                                                                                   focus:ring-2 focus:ring-gray-900 focus:border-gray-900">
                                          ${product.variants.map(variant => `
                                              <option value="${variant._id}" ${variant.stock === 0 ? 'disabled' : ''}>
                                                  ${variant.size} (${variant.stock} available)
                                              </option>
                                          `).join('')}
                                      </select>
                                      <button 
                                          onclick="addToCart('${product._id}')"
                                          class="w-full py-3 bg-gray-900 text-white text-sm font-medium rounded-lg hover:bg-gray-800 transition-all duration-300">
                                          Add to Cart
                                      </button>
                                  </div>
                              ` : ''}
                          </div>
                      </div>
                  `;
              }).join('');
          }
      
          // Function to update pagination UI
          function updatePagination(paginationData) {
              currentPage = paginationData.currentPage;
              totalPages = paginationData.totalPages;
              currentPageSpan.textContent = currentPage;
              totalPagesSpan.textContent = totalPages;
              prevPageBtn.disabled = !paginationData.hasPrevPage;
              nextPageBtn.disabled = !paginationData.hasNextPage;
          }
      
          // Enhanced fetch products function
          async function fetchProducts(page = 1) {
              try {
                  showLoading();
      
                  const queryParams = new URLSearchParams({
                      page,
                      search: searchInput.value,
                      sort: sortFilter.value,
                      color: colorFilter.value,
                      minPrice: minPriceFilter.value,
                      maxPrice: maxPriceFilter.value,
                      category: categoriesSelect.value
                  });
      
                  const response = await fetch(`/shop?${queryParams.toString()}`, {
                      headers: {
                          'X-Requested-With': 'XMLHttpRequest'
                      }
                  });
                  
                  if (!response.ok) throw new Error('Network response was not ok');
                  
                  const data = await response.json();
                  console.log("Fetched products:", data.products); // Debug log
                  
                  updatePagination(data.pagination);
                  productGrid.innerHTML = renderProducts(data.products);
                  
                  // Reinitialize 3D effects after new products are loaded
                  initialize3DEffects();
                  
                  const url = new URL(window.location);
                  queryParams.forEach((value, key) => {
                      if (value) {
                          url.searchParams.set(key, value);
                      } else {
                          url.searchParams.delete(key);
                      }
                  });
                  window.history.pushState({}, '', url);
      
              } catch (error) {
                  console.error('Error fetching products:', error);
                  productGrid.innerHTML = `
                      <div class="col-span-full text-center py-8">
                          <p class="text-red-500">Error loading products. Please try again.</p>
                          <button onclick="fetchProducts(1)" class="mt-4 px-4 py-2 bg-zinc-800 text-white rounded-lg hover:bg-zinc-700">
                              Retry
                          </button>
                      </div>
                  `;
              }
          }
      
          // Populate color filter options
          function populateFilterOptions() {
              const colors = [...new Set(originalProducts.map(p => p.color))].filter(Boolean).sort();
              
              while (colorFilter.options.length > 1) {
                  colorFilter.remove(1);
              }
      
              colors.forEach(color => {
                  const option = new Option(
                      color.charAt(0).toUpperCase() + color.slice(1).toLowerCase(), 
                      color
                  );
                  colorFilter.add(option);
              });
          }
      
          // Event listeners
          searchButton.addEventListener('click', applyFilters);
          searchInput.addEventListener('keyup', (e) => {
              if (e.key === 'Enter') applyFilters();
          });
          
          [sortFilter, colorFilter,categoriesSelect].forEach(filter => {
              filter.addEventListener('change', applyFilters);
          });
      
          let priceTimeout;
          [minPriceFilter, maxPriceFilter].forEach(input => {
              input.addEventListener('input', () => {
                  clearTimeout(priceTimeout);
                  priceTimeout = setTimeout(applyFilters, 500);
              });
          });
      
          resetButton.addEventListener('click', async () => {
              searchInput.value = '';
              sortFilter.value = 'default';
              colorFilter.value = '';
              minPriceFilter.value = '';
              maxPriceFilter.value = '';
              categoriesSelect.value = ''; 
              await fetchProducts(1);
          });
      
          prevPageBtn.addEventListener('click', () => {
              if (currentPage > 1) {
                  fetchProducts(currentPage - 1);
              }
          });
      
          nextPageBtn.addEventListener('click', () => {
              if (currentPage < totalPages) {
                  fetchProducts(currentPage + 1);
              }
          });
      
          // Initialize
          const initialPagination = <%- JSON.stringify(pagination || { currentPage: 1, totalPages: 1 }) %>;
          currentPage = initialPagination.currentPage;
          totalPages = initialPagination.totalPages;
          currentPageSpan.textContent = currentPage;
          totalPagesSpan.textContent = totalPages;
          prevPageBtn.disabled = !initialPagination.hasPrevPage;
          nextPageBtn.disabled = !initialPagination.hasNextPage;
      
          populateFilterOptions();
      
          // Restore filter values from URL if they exist
          const urlParams = new URLSearchParams(window.location.search);
          if (urlParams.has('search')) searchInput.value = urlParams.get('search');
          if (urlParams.has('sort')) sortFilter.value = urlParams.get('sort');
          if (urlParams.has('color')) colorFilter.value = urlParams.get('color');
          if (urlParams.has('minPrice')) minPriceFilter.value = urlParams.get('minPrice');
          if (urlParams.has('maxPrice')) maxPriceFilter.value = urlParams.get('maxPrice');

          // Add this function to initialize 3D effects
          function initialize3DEffects() {
              const cards = document.querySelectorAll('.product-card');
              
              cards.forEach(card => {
                  card.addEventListener('mousemove', function(e) {
                      const rect = card.getBoundingClientRect();
                      const x = e.clientX - rect.left;
                      const y = e.clientY - rect.top;
                      
                      const centerX = rect.width / 2;
                      const centerY = rect.height / 2;
                      
                      const rotateX = (y - centerY) / 20;
                      const rotateY = (centerX - x) / 20;
                      
                      const imageContainer = card.querySelector('.product-image-container');
                      if (imageContainer) {
                          imageContainer.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateZ(20px)`;
                      }
                  });

                  card.addEventListener('mouseleave', function() {
                      const imageContainer = card.querySelector('.product-image-container');
                      if (imageContainer) {
                          imageContainer.style.transform = 'perspective(1000px) rotateX(0) rotateY(0) translateZ(0)';
                      }
                  });
              });
          }

          // Initialize effects on page load
          initialize3DEffects();
      });
    </script>
    <script>
        async function addToCart(productId) {
            try {
                const variantSelect = document.getElementById(`variant-${productId}`);
                if (!variantSelect) {
                    throw new Error('Please select a size');
                }
                const variantId = variantSelect.value;

                const response = await fetch('/cart/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        productId: productId,
                        variantId: variantId 
                    })
                });

                const data = await response.json();

                if (response.ok) {
                    // Success notification
                    Swal.fire({
                        title: 'Success!',
                        text: data.message,
                        icon: 'success',
                        showConfirmButton: true,
                        confirmButtonText: 'Continue Shopping',
                        showDenyButton: true,
                        denyButtonText: 'Go to Cart',
                        customClass: {
                            confirmButton: 'bg-gray-800 text-white px-4 py-2 rounded-lg mr-2 hover:bg-gray-700',
                            denyButton: 'bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700'
                        }
                    }).then((result) => {
                        if (result.isDenied) {
                            window.location.href = '/cart';
                        }
                    });
                } else {
                    // Error notification
                    Swal.fire({
                        title: 'Error!',
                        text: data.message || 'Failed to add product to cart',
                        icon: 'error',
                        confirmButtonText: 'OK',
                        customClass: {
                            confirmButton: 'bg-gray-800 text-white px-4 py-2 rounded-lg hover:bg-gray-700'
                        }
                    });
                }
            } catch (error) {
                console.error('Error adding to cart:', error);
                // Error notification
                Swal.fire({
                    title: 'Error!',
                    text: 'An error occurred while adding the product to cart',
                    icon: 'error',
                    confirmButtonText: 'OK',
                    customClass: {
                        confirmButton: 'bg-gray-800 text-white px-4 py-2 rounded-lg hover:bg-gray-700'
                    }
                });
            }
        }
    </script>
  </body>
</html>
