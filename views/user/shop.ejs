
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- Update the path to match your actual folder structure -->
    <link rel="stylesheet" href="/tailwindcss/output.css">
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
      integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <title>Shop Page</title>
</head>

  <body class="bg-gray-300">
    <%- include("../partials/nav") %>
    <div class="mt-16"></div>

    <!-- Breadcrumb -->
    <div class="bg-gray-300 pt-4">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <nav class="flex" aria-label="Breadcrumb">
          <ol class="inline-flex items-center space-x-1 md:space-x-3">
            <!-- Home Link -->
            <li class="inline-flex items-center">
              <a href="/home" 
                 class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-gray-900">
                <i class="fas fa-home mr-2"></i>
                Home
              </a>
            </li>
            <!-- Separator -->
            <li>
              <div class="flex items-center">
                <i class="fas fa-chevron-right text-gray-500 text-sm mx-2"></i>
                <span class="text-sm font-medium text-gray-500">Shop</span>
              </div>
            </li>
          </ol>
        </nav>
      </div>
    </div>
<!-- Page Content -->
<div class="bg-gray-300">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex flex-col md:flex-row gap-8 mt-8">
      <!-- Left Sidebar - Filters -->
      <div class="md:w-1/4">
        <div class="sticky top-4 bg-white p-6 rounded-lg shadow-sm">
          <!-- Sorting Section -->
          <div class="mb-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Filters</h3>
            <div class="space-y-4">
              <div>
                <label for="sortFilter" class="block text-gray-700 font-medium mb-2">Sort By</label>
                <select id="sortFilter" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-2 focus:border-gray-900">
                  <option value="default">Default</option>                                                                               
                  <option value="newArrivals">New Arrivals</option>
                  <option value="priceLowToHigh">Price: Low to High</option>
                  <option value="priceHighToLow">Price: High to Low</option>
                  <option value="ratingHighToLow">Rating: High to Low</option>
                  <option value="nameAZ">Name: A to Z</option>
                  <option value="nameZA">Name: Z to A</option>
                  <option value="popularity">Most Popular</option>
              </select>
              </div>

              <div>
                <label for="color" class="block text-gray-700 font-medium mb-2">Colour</label>
                <select id="color" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-2 focus:border-gray-900">
                  <option value="">All</option>
                </select>
              </div>

              <div>
                <label class="block text-gray-700 font-medium mb-2">Price Range</label>
                <div class="flex gap-2">
                  <input type="number" id="minPrice" placeholder="Min" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-2 focus:border-gray-900">
                  <input type="number" id="maxPrice" placeholder="Max" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-2 focus:border-gray-900">
                </div>
              </div>

              
              
              <div class="mb-4">
                <label for="category" class="block text-gray-700 font-medium">Category</label>
                <select id="category" class="w-full px-3 py-2 border rounded-lg">
                  <script>
                    console.log("Categories in EJS:", <%- JSON.stringify(categories) %>);
                  </script>
                  <option value="">All Categories</option>
                  <% if (typeof categories !== "undefined" && categories.length > 0) { %>
                    <% categories.forEach(category => { %>
                      <option value="<%= category._id %>"><%= category.name %></option>
                    <% }); %>
                  <% } else { %>
                    <option value="">No Categories Available</option>
                  <% } %>
                </select>
              </div>

              <button id="resetButton" class="w-full mt-4 px-4 py-2 bg-zinc-800 text-white rounded-lg hover:bg-zinc-700 transition-colors">
                Reset Filters
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Right Side Content -->
      <div class="md:w-3/4">
        <!-- Search Bar -->
        <div class="mb-6">
          <div class="flex items-center">
            <input type="text" id="searchInput" class="flex-1 h-10 px-4 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:border-2 focus:border-gray-900" placeholder="Search products...">
            <button id="searchButton" class="h-10 px-6 bg-zinc-800 text-white rounded-r-lg hover:bg-zinc-700 transition-colors">
              Search
            </button>
          </div>
        </div>

            <!-- Product Grid -->
            <div id="productGrid" class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4">
              <% if (typeof products !== 'undefined' && products.length > 0) { %>
                <script>
                  console.log("Products in EJS:", <%- JSON.stringify(products) %>);
              </script>
              
                  <% products.forEach(product => { %>
                      <a href="/product/<%= product._id %>" 
                         class="bg-white rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-all duration-300 relative">
                          <div class="relative aspect-[4/5] overflow-hidden">
                              <% if (product.images && product.images.length > 0) { %>
                                  <img 
                                      src="<%= product.images[0] %>" 
                                      alt="<%= product.name %>"
                                      class="w-full h-full object-cover hover:scale-105 transition-transform duration-300 <%= product.stock === 0 ? 'opacity-60' : '' %>"
                                      loading="lazy"
                                  >
                              <% } %>
                              
                              <% if (product.stock === 0) { %>
                                  <div class="absolute inset-0 flex items-center justify-center">
                                      <span class="bg-black bg-opacity-75 text-white px-3 py-1.5 rounded-full text-sm font-medium">
                                          Out of Stock
                                      </span>
                                  </div>
                              <% } %>
                          </div>
          
                          <div class="p-4">
                              <h2 class="text-gray-800 text-sm font-medium truncate">
                                  <%= product.name %>
                              </h2>
                              <div class="flex items-baseline gap-1 mt-1">
                                  <span class="text-base font-bold text-gray-900">â‚¹<%= product.price %></span>
                              </div>
                          </div>
                      </a>
                  <% }); %>
              <% } else { %>
                  <div class="col-span-full text-center py-8">
                      <p class="text-gray-500">No products available</p>
                  </div>
              <% } %>
          </div>
            <div class="mt-8 flex justify-center items-center space-x-4">
              <button id="prevPage" class="px-4 py-2 bg-zinc-800 text-white rounded-lg disabled:opacity-50">Previous</button>
              <span class="text-gray-700">
                Page <span id="currentPage">1</span> of <span id="totalPages">1</span>
              </span>
              <button id="nextPage" class="px-4 py-2 bg-zinc-800 text-white rounded-lg disabled:opacity-50">Next</button>
            </div>
          </div>
        
      </div>
    </div>

    <!-- Added margin/padding before footer -->
    <div class="pb-16"></div>

    <%- include("../partials/footer") %>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
          // Cache DOM elements
          const productGrid = document.getElementById('productGrid');
          const searchInput = document.getElementById('searchInput');
          const searchButton = document.getElementById('searchButton');
          const sortFilter = document.getElementById('sortFilter');
          const colorFilter = document.getElementById('color');
          const minPriceFilter = document.getElementById('minPrice');
          const maxPriceFilter = document.getElementById('maxPrice');
          // const stockFilter = document.getElementById('stockFilter');
          const resetButton = document.getElementById('resetButton');
          const prevPageBtn = document.getElementById('prevPage');
          const nextPageBtn = document.getElementById('nextPage');
          const currentPageSpan = document.getElementById('currentPage');
          const categoriesSelect = document.getElementById('category');
          const totalPagesSpan = document.getElementById('totalPages');
      
          // Store original products data
          let products = <%- JSON.stringify(products) %>;
          const originalProducts = [...products];
      
          // Function to show loading state
          function showLoading() {
              productGrid.innerHTML = `
                  <div class="col-span-full flex justify-center py-8">
                      <div class="loading-spinner"></div>
                  </div>
              `;
          }
      
          // Function to apply all filters
          async function applyFilters() {
              currentPage = 1; // Reset to first page when filters change
              await fetchProducts(currentPage);
          }
      
          // Enhanced function to render products
          function renderProducts(productsToRender) {
              if (!productsToRender || productsToRender.length === 0) {
                  productGrid.innerHTML = `
                      <div class="col-span-full text-center py-8">
                          <p class="text-gray-500">No products found matching your criteria</p>
                      </div>
                  `;
                  return;
              }
      
              productGrid.innerHTML = productsToRender.map((product, index) => `
                  <a href="/product/${product._id}" 
                     class="product-item bg-white rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-all duration-300 relative"
                     style="animation-delay: ${index * 0.1}s">
                      <div class="relative aspect-[4/5] overflow-hidden">
                          <img
                              src="${product.images[0]}"
                              alt="${product.name}"
                              class="w-full h-full object-cover hover:scale-105 transition-transform duration-300 ${product.stock === 0 ? 'opacity-60' : ''}"
                              loading="lazy"
                          >
                          ${product.discountPrice && product.discountPrice < product.price ? `
                              <div class="absolute top-2 right-2 bg-red-500 text-white px-2 py-0.5 rounded text-xs font-medium">
                                  -${Math.round((product.price - product.discountPrice) / product.price * 100)}%
                              </div>
                          ` : ''}
                          ${product.stock === 0 ? `
                              <div class="absolute inset-0 flex items-center justify-center">
                                  <span class="bg-black bg-opacity-75 text-white px-3 py-1.5 rounded-full text-sm font-medium">
                                      Out of Stock
                                  </span>
                              </div>
                          ` : ''}
                      </div>
                      <div class="p-4">
                          <h2 class="text-gray-800 text-sm font-medium truncate">
                              ${product.name}
                          </h2>
                          <div class="flex items-baseline gap-1 mt-1">
                              <span class="text-base font-bold text-gray-900">â‚¹${product.discountPrice || product.price}</span>
                              ${product.discountPrice && product.discountPrice < product.price ? `
                                  <span class="text-xs text-gray-500 line-through">â‚¹${product.price}</span>
                              ` : ''}
                          </div>
                      </div>
                  </a>
              `).join('');
          }
      
          // Function to update pagination UI
          function updatePagination(paginationData) {
              currentPage = paginationData.currentPage;
              totalPages = paginationData.totalPages;
              currentPageSpan.textContent = currentPage;
              totalPagesSpan.textContent = totalPages;
              prevPageBtn.disabled = !paginationData.hasPrevPage;
              nextPageBtn.disabled = !paginationData.hasNextPage;
          }
      
          // Enhanced fetch products function
          async function fetchProducts(page = 1) {
              try {
                  showLoading();
      
                  const queryParams = new URLSearchParams({
                      page,
                      search: searchInput.value,
                      sort: sortFilter.value,
                      color: colorFilter.value,
                      minPrice: minPriceFilter.value,
                      maxPrice: maxPriceFilter.value,
                      category:categoriesSelect.value
                  });
      
                  const response = await fetch(`/shop?${queryParams.toString()}`, {
                      headers: {
                          'X-Requested-With': 'XMLHttpRequest'
                      }
                  });
                  
                  if (!response.ok) throw new Error('Network response was not ok');
                  
                  const data = await response.json();
                  
                  updatePagination(data.pagination);
                  renderProducts(data.products);
                  
                  // Update URL with current filters
                  const url = new URL(window.location);
                  queryParams.forEach((value, key) => {
                      if (value) {
                          url.searchParams.set(key, value);
                      } else {
                          url.searchParams.delete(key);
                      }
                  });
                  window.history.pushState({}, '', url);
      
                  // Smooth scroll to top of product grid
                  productGrid.scrollIntoView({ behavior: 'smooth' });
      
              } catch (error) {
                  console.error('Error fetching products:', error);
                  productGrid.innerHTML = `
                      <div class="col-span-full text-center py-8">
                          <p class="text-red-500">Error loading products. Please try again.</p>
                          <button onclick="fetchProducts(1)" class="mt-4 px-4 py-2 bg-zinc-800 text-white rounded-lg hover:bg-zinc-700">
                              Retry
                          </button>
                      </div>
                  `;
              }
          }
      
          // Populate color filter options
          function populateFilterOptions() {
              const colors = [...new Set(originalProducts.map(p => p.color))].filter(Boolean).sort();
              
              while (colorFilter.options.length > 1) {
                  colorFilter.remove(1);
              }
      
              colors.forEach(color => {
                  const option = new Option(
                      color.charAt(0).toUpperCase() + color.slice(1).toLowerCase(), 
                      color
                  );
                  colorFilter.add(option);
              });
          }
      
          // Event listeners
          searchButton.addEventListener('click', applyFilters);
          searchInput.addEventListener('keyup', (e) => {
              if (e.key === 'Enter') applyFilters();
          });
          
          [sortFilter, colorFilter,categoriesSelect].forEach(filter => {
              filter.addEventListener('change', applyFilters);
          });
      
          let priceTimeout;
          [minPriceFilter, maxPriceFilter].forEach(input => {
              input.addEventListener('input', () => {
                  clearTimeout(priceTimeout);
                  priceTimeout = setTimeout(applyFilters, 500);
              });
          });
      
          resetButton.addEventListener('click', async () => {
              searchInput.value = '';
              sortFilter.value = 'default';
              colorFilter.value = '';
              minPriceFilter.value = '';
              maxPriceFilter.value = '';
              categoriesSelect.value = ''; 
              await fetchProducts(1);
          });
      
          prevPageBtn.addEventListener('click', () => {
              if (currentPage > 1) {
                  fetchProducts(currentPage - 1);
              }
          });
      
          nextPageBtn.addEventListener('click', () => {
              if (currentPage < totalPages) {
                  fetchProducts(currentPage + 1);
              }
          });
      
          // Initialize
          const initialPagination = <%- JSON.stringify(pagination || { currentPage: 1, totalPages: 1 }) %>;
          currentPage = initialPagination.currentPage;
          totalPages = initialPagination.totalPages;
          currentPageSpan.textContent = currentPage;
          totalPagesSpan.textContent = totalPages;
          prevPageBtn.disabled = !initialPagination.hasPrevPage;
          nextPageBtn.disabled = !initialPagination.hasNextPage;
      
          populateFilterOptions();
      
          // Restore filter values from URL if they exist
          const urlParams = new URLSearchParams(window.location.search);
          if (urlParams.has('search')) searchInput.value = urlParams.get('search');
          if (urlParams.has('sort')) sortFilter.value = urlParams.get('sort');
          if (urlParams.has('color')) colorFilter.value = urlParams.get('color');
          if (urlParams.has('minPrice')) minPriceFilter.value = urlParams.get('minPrice');
          if (urlParams.has('maxPrice')) maxPriceFilter.value = urlParams.get('maxPrice');
          // if (urlParams.has('stock')) stockFilter.value = urlParams.get('stock');
      });
      </script>
  </body>
</html>
