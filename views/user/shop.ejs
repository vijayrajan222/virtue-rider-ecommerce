<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="tailwindcss/output.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
  <title>Shop Page</title>
</head>

<body class="bg-gray-300">
  <%- include("../partials/nav") %>
    <div class="mt-16"></div>

    <!-- Breadcrumb -->
    <div class="bg-gray-300 pt-4">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <nav class="flex" aria-label="Breadcrumb">
          <ol class="inline-flex items-center space-x-1 md:space-x-3">
            <!-- Home Link -->
            <li class="inline-flex items-center">
              <a href="/home" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-gray-900">
                <i class="fas fa-home mr-2"></i>
                Home
              </a>
            </li>
            <!-- Separator -->
            <li>
              <div class="flex items-center">
                <i class="fas fa-chevron-right text-gray-500 text-sm mx-2"></i>
                <span class="text-sm font-medium text-gray-500">Shop</span>
              </div>
            </li>
          </ol>
        </nav>
      </div>
    </div>

    <!-- Page Content -->
    <div class="bg-gray-300">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 class="text-3xl font-bold text-gray-900 mb-8 text-center"></h2>

        <div class="flex flex-col md:flex-row gap-8 ">
          <!-- Left Sidebar - Filters -->
          <div class="md:w-1/4">
            <div class="sticky top-4 space-y-6 bg-white p-6 rounded-lg shadow-sm">
              <!-- Sorting Section -->
              <div class="mb-6">
                <label for="sortFilter" class="block text-gray-700 font-medium mb-2">Sort By</label>
                <select id="sortFilter"
                  class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-2 focus:border-gray-900">
                  <option value="default">Default</option>
                  <option value="priceLowToHigh">Price: Low to High</option>
                  <option value="priceHighToLow">Price: High to Low</option>
                  <option value="ratingHighToLow">Rating: High to Low</option>
                  <option value="newArrivals">New Arrivals</option>
                </select>
              </div>

              <!-- Filter Section -->
              <div class="space-y-4">
                <!-- Category Dropdown -->
                <div>
                  <label for="category" class="block text-gray-700 font-medium mb-2">Category</label>
                  <select id="category"
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-2 focus:border-gray-900">
                    <option value="">All Categories</option>
                    <% categories.forEach(category=> { %>
                      <option value="<%= category._id %>">
                        <%= category.name %>
                      </option>
                      <% }); %>
                  </select>
                </div>

                <!-- Color Input Field -->
                <div>
                  <label for="color" class="block text-gray-700 font-medium mb-2">Color</label>
                  <input type="text" id="color" placeholder="Enter color"
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-2 focus:border-gray-900" />
                </div>

                <!-- Size Dropdown -->
                <div>
                  <label for="size" class="block text-gray-700 font-medium mb-2">Size</label>
                  <select id="size"
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-2 focus:border-gray-900">
                    <option value="">All Sizes</option>
                    <option value="S">Small</option>
                    <option value="M">Medium</option>
                    <option value="L">Large</option>
                    <option value="XL">Extra Large</option>
                  </select>
                </div>

                <!-- Price Range -->
                <div>
                  <label class="block text-gray-700 font-medium mb-2">Price Range</label>
                  <div class="flex gap-2">
                    <input type="number" id="minPrice"
                      class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-2 focus:border-gray-900"
                      placeholder="Min" />
                    <input type="number" id="maxPrice"
                      class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-2 focus:border-gray-900"
                      placeholder="Max" />
                  </div>
                </div>

                <!-- Stock Filter -->
                <div>
                  <label for="stockFilter" class="block text-gray-700 font-medium mb-2">Stock Status</label>
                  <select id="stockFilter"
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-2 focus:border-gray-900">
                    <option value="">All Products</option>
                    <option value="inStock">In Stock</option>
                    <option value="outOfStock">Out of Stock</option>
                  </select>
                </div>
              </div>

              <!-- Reset Button -->
              <div class="mt-6">
                <button id="resetButton"
                  class="px-4 py-2 bg-zinc-800 text-white rounded-lg transform transition-transform duration-300 ease-in-out hover:bg-zinc-600 hover:scale-105 active:bg-zinc-700 active:scale-95">
                  Reset Filters
                </button>
              </div>

              <!-- Right Side - Product Grid -->
              <div class="md:w-3/4">
                <!-- Search Bar -->
                <div class="mb-6 flex-1">
                  <div class="flex items-center">
                    <input type="text" id="searchInput"
                      class="h-10 flex-grow px-4 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:border-2 focus:border-gray-900"
                      placeholder="Search products..." />
                    <button id="searchButton"
                      class="h-10 px-4 py-2 bg-zinc-800 text-white rounded-r-lg transform transition-transform duration-300 ease-in-out hover:bg-zinc-600 hover:scale-105 active:bg-zinc-700 active:scale-95">
                      Search
                    </button>
                  </div>
                </div>

                <!-- Products Grid -->
                <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                  <% if (products && products.length> 0) { %>
                    <% products.forEach(product=> { %>
                      <div class="bg-white rounded-lg shadow-md overflow-hidden">
                        <img src="<%= product.imageUrl ? product.imageUrl[0] : '/images/placeholder.jpg' %>"
                          alt="<%= product.productName %>" class="w-full h-48 object-cover">
                        <div class="p-4">
                          <h3 class="text-lg font-semibold mb-2">
                            <%= product.productName %>
                          </h3>
                          <div class="flex justify-between items-center">
                            <div>
                              <span class="text-xl font-bold">₹<%= product.price %></span>
                              <% if (product.discountPrice < product.price) { %>
                                <span class="text-sm text-gray-500 line-through ml-2">₹<%= product.price %></span>
                                <% } %>
                            </div>
                            <% if (product.stock===0) { %>
                              <span class="text-red-500">Out of Stock</span>
                              <% } %>
                          </div>
                        </div>
                      </div>
                      <% }); %>
                        <% } else { %>
                          <div class="col-span-full text-center py-10">
                            <p class="text-gray-500">No products found</p>
                          </div>
                          <% } %>
                </div>

                <!-- Pagination -->
                <div class="mt-8 flex justify-center gap-2">
                  <% if (pagination.hasPrevPage) { %>
                    <button onclick="changePage(<%= pagination.currentPage - 1 %>)"
                      class="px-4 py-2 bg-gray-200 rounded">Previous</button>
                    <% } %>
                      <span class="px-4 py-2">Page <%= pagination.currentPage %> of <%= pagination.totalPages %></span>
                      <% if (pagination.hasNextPage) { %>
                        <button onclick="changePage(<%= pagination.currentPage + 1 %>)"
                          class="px-4 py-2 bg-gray-200 rounded">Next</button>
                        <% } %>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Added margin/padding before footer -->
        <div class="pb-16"></div>

        <%- include("../partials/footer") %>
          <script>
            document.addEventListener('DOMContentLoaded', function () {
              // Cache DOM elements
              const productGrid = document.getElementById('productGrid');
              const searchInput = document.getElementById('searchInput');
              const searchButton = document.getElementById('searchButton');
              const sortFilter = document.getElementById('sortFilter');
              const genderFilter = document.getElementById('gender');
              const colorFilter = document.getElementById('color');
              const minPriceFilter = document.getElementById('minPrice');
              const maxPriceFilter = document.getElementById('maxPrice');
              const stockFilter = document.getElementById('stockFilter');
              const resetButton = document.getElementById('resetButton');
              const prevPageBtn = document.getElementById('prevPage');
              const nextPageBtn = document.getElementById('nextPage');
              const currentPageSpan = document.getElementById('currentPage');
              const totalPagesSpan = document.getElementById('totalPages');

              // Store original products data
              let products = <% - JSON.stringify(products) %>;
              const originalProducts = [...products];

              // Function to apply all filters
              async function applyFilters() {
                currentPage = 1; // Reset to first page when filters change
                await fetchProducts(currentPage);
              }

              // Function to render products
              function renderProducts(productsToRender) {
                if (productsToRender.length === 0) {
                  productGrid.innerHTML = `
                      <div class="col-span-full text-center py-8">
                          <p class="text-gray-500">No products found matching your criteria</p>
                      </div>
                  `;
                  return;
                }

                productGrid.innerHTML = productsToRender.map(product => `
                  <a href="/product/${product._id}" 
                     class="bg-white rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-all duration-300 relative">
                      <div class="relative aspect-[4/5] overflow-hidden">
                          <img
                              src="${product.imageUrl[0]}"
                              alt="${product.productName}"
                              class="w-full h-full object-cover hover:scale-105 transition-transform duration-300 ${product.stock === 0 ? 'opacity-60' : ''}"
                              loading="lazy"
                          >
                          ${product.discountPrice < product.price ? `
                              <div class="absolute top-2 right-2 bg-red-500 text-white px-2 py-0.5 rounded text-xs font-medium">
                                  -${Math.round((product.price - product.discountPrice) / product.price * 100)}%
                              </div>
                          ` : ''}
                          ${product.stock === 0 ? `
                              <div class="absolute inset-0 flex items-center justify-center">
                                  <span class="bg-black bg-opacity-75 text-white px-3 py-1.5 rounded-full text-sm font-medium">
                                      Out of Stock
                                  </span>
                              </div>
                          ` : ''}
                      </div>
                      <div class="p-2">
                          <h2 class="text-gray-800 text-sm font-medium truncate">
                              ${product.productName}
                          </h2>
                          <div class="flex items-baseline gap-1 mt-1">
                              <span class="text-base font-bold text-gray-900">₹${product.discountPrice}</span>
                              ${product.discountPrice < product.price ? `
                                  <span class="text-xs text-gray-500 line-through">₹${product.price}</span>
                              ` : ''}
                          </div>
                      </div>
                  </a>
              `).join('');
              }

              // Populate color filter options
              function populateFilterOptions() {
                // Get unique colors
                const colors = [...new Set(originalProducts.map(p => p.color))].filter(Boolean).sort();

                // Clear existing options except the first one (All)
                while (colorFilter.options.length > 1) {
                  colorFilter.remove(1);
                }

                // Add color options
                colors.forEach(color => {
                  const option = new Option(
                    color.charAt(0).toUpperCase() + color.slice(1).toLowerCase(),
                    color
                  );
                  colorFilter.add(option);
                });
              }

              // Event listeners
              searchButton.addEventListener('click', applyFilters);
              searchInput.addEventListener('keyup', (e) => {
                if (e.key === 'Enter') applyFilters();
              });

              // Add input event listeners for immediate filtering
              [sortFilter, genderFilter, colorFilter, stockFilter].forEach(filter => {
                filter.addEventListener('change', applyFilters);
              });

              // Add debounced event listeners for price inputs
              let priceTimeout;
              [minPriceFilter, maxPriceFilter].forEach(input => {
                input.addEventListener('input', () => {
                  clearTimeout(priceTimeout);
                  priceTimeout = setTimeout(applyFilters, 500);
                });
              });

              // Reset filters
              resetButton.addEventListener('click', async () => {
                searchInput.value = '';
                sortFilter.value = 'default';
                genderFilter.value = '';
                colorFilter.value = '';
                minPriceFilter.value = '';
                maxPriceFilter.value = '';
                stockFilter.value = '';
                await fetchProducts(1);
              });

              // Add pagination state
              let currentPage = 1;
              let totalPages = 1;

              // Function to fetch products with pagination
              async function fetchProducts(page = 1) {
                try {
                  // Build query string with all current filters
                  const queryParams = new URLSearchParams({
                    page,
                    search: searchInput.value,
                    sort: sortFilter.value,
                    gender: genderFilter.value,
                    color: colorFilter.value,
                    minPrice: minPriceFilter.value,
                    maxPrice: maxPriceFilter.value,
                    stock: stockFilter.value
                  });

                  const response = await fetch(`/shop?${queryParams.toString()}`, {
                    headers: {
                      'X-Requested-With': 'XMLHttpRequest'
                    }
                  });

                  if (!response.ok) throw new Error('Network response was not ok');

                  const data = await response.json();

                  // Update pagination state
                  currentPage = data.pagination.currentPage;
                  totalPages = data.pagination.totalPages;

                  // Update UI
                  currentPageSpan.textContent = currentPage;
                  totalPagesSpan.textContent = totalPages;
                  prevPageBtn.disabled = !data.pagination.hasPrevPage;
                  nextPageBtn.disabled = !data.pagination.hasNextPage;

                  // Render products
                  renderProducts(data.products);

                  // Scroll to top of product grid smoothly
                  productGrid.scrollIntoView({ behavior: 'smooth' });
                } catch (error) {
                  console.error('Error fetching products:', error);
                }
              }

              // Add pagination event listeners
              prevPageBtn.addEventListener('click', () => {
                if (currentPage > 1) {
                  fetchProducts(currentPage - 1);
                }
              });

              nextPageBtn.addEventListener('click', () => {
                if (currentPage < totalPages) {
                  fetchProducts(currentPage + 1);
                }
              });

              // Initialize pagination
              const initialPagination = <% - JSON.stringify(pagination || { currentPage: 1, totalPages: 1 }) %>;
              currentPage = initialPagination.currentPage;
              totalPages = initialPagination.totalPages;
              currentPageSpan.textContent = currentPage;
              totalPagesSpan.textContent = totalPages;
              prevPageBtn.disabled = !initialPagination.hasPrevPage;
              nextPageBtn.disabled = !initialPagination.hasNextPage;

              // Initialize
              populateFilterOptions();
            });
          </script>
</body>

</html>