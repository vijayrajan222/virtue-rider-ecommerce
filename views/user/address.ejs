<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Onyx - My Addresses</title>
    <link rel="stylesheet" href="tailwindcss/output.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
      integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
  </head>
  <body class="bg-gray-100">
    <!-- nav -->
    <%- include("../partials/nav") %>
    <div class="h-10"></div>
    <!-- Main Content -->
    <main class="container mx-auto flex flex-col md:flex-row py-6 md:py-10 px-4 md:px-6 gap-6">
      <!-- Sidebar -->
      <%- include("../partials/profileSidebar") %>
      <!-- Address Information -->
      <section class="w-full md:w-3/4 bg-white p-4 md:p-6 rounded-lg shadow-md">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
          <h2 class="text-xl md:text-2xl font-bold text-gray-800">My Addresses</h2>
          <button 
            onclick="openAddAddressModal()"
            class="w-full sm:w-auto bg-black text-white px-4 py-2 rounded-full hover:bg-gray-800 transition-colors flex items-center justify-center space-x-2"
          >
            <i class="fas fa-plus"></i>
            <span>Add New Address</span>
          </button>
        </div>
        <!-- Address Cards -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 addresses-container">
          <% addresses.forEach(address => { %>
            <div class="border rounded-lg p-4 relative hover:shadow-md transition-shadow bg-gray-50 hover:bg-white" data-address-id="<%= address._id %>">
              <div class="flex flex-col sm:flex-row justify-between items-start gap-4">
                <div class="space-y-2 flex-grow">
                  <h4 class="font-semibold text-lg"><%= address.fullName %></h4>
                  <p class="text-gray-600 flex items-center gap-2">
                    <i class="fas fa-phone text-sm"></i>
                    <%= address.mobileNumber %>
                  </p>
                  <p class="text-gray-600 flex items-start gap-2">
                    <i class="fas fa-map-marker-alt text-sm mt-1"></i>
                    <span>
                      <%= address.addressLine1 %>,
                      <% if (address.addressLine2) { %><%= address.addressLine2 %>,<% } %>
                      <%= address.city %>,
                      <%= address.state %> - <%= address.pincode %>
                    </span>
                  </p>
                </div>
                <div class="flex gap-3 sm:self-start">
                  <button 
                    onclick="editAddress('<%= address._id %>', <%= JSON.stringify(address) %>)"
                    class="text-blue-500 hover:text-blue-700 p-2 hover:bg-blue-50 rounded-full transition-colors"
                    title="Edit Address"
                  >
                    <i class="fas fa-edit"></i>
                  </button>
                  <button 
                    onclick="deleteAddress('<%= address._id %>')"
                    class="text-red-500 hover:text-red-700 p-2 hover:bg-red-50 rounded-full transition-colors"
                    title="Delete Address"
                  >
                    <i class="fas fa-trash"></i>
                  </button>
                </div>
              </div>
            </div>
          <% }); %>
          
          <!-- Empty State -->
          <% if (addresses.length === 0) { %>
            <div class="text-center py-12 col-span-2">
              <div class="text-gray-400 mb-4">
                <i class="fas fa-map-marker-alt text-4xl"></i>
              </div>
              <h3 class="text-lg font-medium text-gray-900 mb-2">No addresses found</h3>
              <p class="text-gray-600">Add a new address to get started</p>
            </div>
          <% } %>
        </div>
      </section>
    </main>

    <!-- Address Modal -->
    <div id="addressModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
      <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-xl w-full max-w-md p-6 max-h-[90vh] overflow-y-auto relative">
          <!-- Modal Header -->
          <div class="flex justify-between items-center mb-6 pb-3 border-b">
            <h3 class="text-xl font-bold text-gray-900" id="modalTitle">Add New Address</h3>
            <button onclick="closeAddressModal()" 
              class="text-gray-400 hover:text-gray-600 p-2 rounded-full hover:bg-gray-100 transition-all">
              <i class="fas fa-times"></i>
            </button>
          </div>
          
          <!-- Form Content -->
          <form id="addressForm" class="space-y-5">
            <input type="hidden" id="addressId" name="addressId">
            
            <!-- Full Name -->
            <div class="space-y-2">
              <label class="block text-sm font-medium text-gray-700">Full Name</label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <i class="fas fa-user text-gray-400"></i>
                </div>
                <input type="text" id="fullName" name="fullName" placeholder="Enter your full name"
                  class="pl-10 w-full rounded-lg border-gray-300 focus:border-black focus:ring-black transition-colors">
              </div>
            </div>

            <!-- Mobile Number -->
            <div class="space-y-2">
              <label class="block text-sm font-medium text-gray-700">Mobile Number</label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <i class="fas fa-phone text-gray-400"></i>
                </div>
                <input type="tel" id="mobile" name="mobileNumber" placeholder="Enter 10-digit mobile number"
                  class="pl-10 w-full rounded-lg border-gray-300 focus:border-black focus:ring-black transition-colors">
              </div>
            </div>

            <!-- Address Line 1 -->
            <div class="space-y-2">
              <label class="block text-sm font-medium text-gray-700">Address Line 1</label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <i class="fas fa-home text-gray-400"></i>
                </div>
                <input type="text" id="addressLine1" name="addressLine1" placeholder="Enter your address"
                  class="pl-10 w-full rounded-lg border-gray-300 focus:border-black focus:ring-black transition-colors">
              </div>
            </div>

            <!-- Address Line 2 -->
            <div class="space-y-2">
              <label class="block text-sm font-medium text-gray-700">Address Line 2 (Optional)</label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <i class="fas fa-building text-gray-400"></i>
                </div>
                <input type="text" id="addressLine2" name="addressLine2" placeholder="Apartment, suite, etc. (optional)"
                  class="pl-10 w-full rounded-lg border-gray-300 focus:border-black focus:ring-black transition-colors">
              </div>
            </div>

            <!-- City and State -->
            <div class="grid grid-cols-2 gap-4">
              <div class="space-y-2">
                <label class="block text-sm font-medium text-gray-700">City</label>
                <div class="relative">
                  <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="fas fa-city text-gray-400"></i>
                  </div>
                  <input type="text" id="city" name="city" placeholder="Enter city"
                    class="pl-10 w-full rounded-lg border-gray-300 focus:border-black focus:ring-black transition-colors">
                </div>
              </div>
              
              <div class="space-y-2">
                <label class="block text-sm font-medium text-gray-700">State</label>
                <select id="state" name="state" 
                  class="w-full rounded-lg border-gray-300 focus:border-black focus:ring-black transition-colors">
                  <option value="">Select State</option>
                  <option value="Andhra Pradesh">Andhra Pradesh</option>
                  <option value="Arunachal Pradesh">Arunachal Pradesh</option>
                  <option value="Assam">Assam</option>
                  <option value="Bihar">Bihar</option>
                  <option value="Chhattisgarh">Chhattisgarh</option>
                  <option value="Goa">Goa</option>
                  <option value="Gujarat">Gujarat</option>
                  <option value="Haryana">Haryana</option>
                  <option value="Himachal Pradesh">Himachal Pradesh</option>
                  <option value="Jharkhand">Jharkhand</option>
                  <option value="Karnataka">Karnataka</option>
                  <option value="Kerala">Kerala</option>
                  <option value="Madhya Pradesh">Madhya Pradesh</option>
                  <option value="Maharashtra">Maharashtra</option>
                  <option value="Manipur">Manipur</option>
                  <option value="Meghalaya">Meghalaya</option>
                  <option value="Mizoram">Mizoram</option>
                  <option value="Nagaland">Nagaland</option>
                  <option value="Odisha">Odisha</option>
                  <option value="Punjab">Punjab</option>
                  <option value="Rajasthan">Rajasthan</option>
                  <option value="Sikkim">Sikkim</option>
                  <option value="Tamil Nadu">Tamil Nadu</option>
                  <option value="Telangana">Telangana</option>
                  <option value="Tripura">Tripura</option>
                  <option value="Uttar Pradesh">Uttar Pradesh</option>
                  <option value="Uttarakhand">Uttarakhand</option>
                  <option value="West Bengal">West Bengal</option>
                  <option value="Andaman and Nicobar Islands">Andaman and Nicobar Islands</option>
                  <option value="Chandigarh">Chandigarh</option>
                  <option value="Dadra and Nagar Haveli">Dadra and Nagar Haveli</option>
                  <option value="Daman and Diu">Daman and Diu</option>
                  <option value="Delhi">Delhi</option>
                  <option value="Lakshadweep">Lakshadweep</option>
                  <option value="Puducherry">Puducherry</option>
                </select>
              </div>
            </div>

            <!-- PIN Code -->
            <div class="space-y-2">
              <label class="block text-sm font-medium text-gray-700">PIN Code</label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <i class="fas fa-map-pin text-gray-400"></i>
                </div>
                <input type="text" id="pincode" name="pincode" placeholder="Enter 6-digit PIN code"
                  class="pl-10 w-full rounded-lg border-gray-300 focus:border-black focus:ring-black transition-colors">
              </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex flex-col sm:flex-row justify-end gap-3 mt-8 pt-4 border-t">
              <button type="button" onclick="closeAddressModal()" 
                class="w-full sm:w-auto px-6 py-2.5 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors order-2 sm:order-1">
                Cancel
              </button>
              <button type="submit" 
                class="w-full sm:w-auto px-6 py-2.5 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors order-1 sm:order-2">
                Save Address
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Alert Modal -->
    <div id="alertModal" class="fixed inset-0 bg-black/50 z-50 hidden">
      <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-xl w-full max-w-sm p-6 transform transition-all">
          <!-- Success Alert -->
          <div id="successAlert" class="hidden text-center">
            <div class="mb-4">
              <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100">
                <i class="fas fa-check text-xl text-green-600"></i>
              </div>
            </div>
            <h3 class="text-lg font-semibold text-gray-900 mb-2">Success</h3>
            <p class="text-gray-600 mb-6" id="successMessage">Address updated successfully</p>
            <button onclick="hideAlert()" 
              class="w-full px-6 py-2.5 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors">
              Continue
            </button>
          </div>

          <!-- Error Alert -->
          <div id="errorAlert" class="hidden text-center">
            <div class="mb-4">
              <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
                <i class="fas fa-exclamation-circle text-xl text-red-600"></i>
              </div>
            </div>
            <h3 class="text-lg font-semibold text-gray-900 mb-2">Error</h3>
            <p class="text-gray-600 mb-6" id="errorMessage">Something went wrong</p>
            <button onclick="hideAlert()" 
              class="w-full px-6 py-2.5 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors">
              Try Again
            </button>
          </div>

          <!-- Loading Alert -->
          <div id="loadingAlert" class="hidden text-center">
            <div class="mb-4">
              <div class="mx-auto flex items-center justify-center h-12 w-12">
                <div class="animate-spin rounded-full h-8 w-8 border-4 border-gray-200 border-t-black"></div>
              </div>
            </div>
            <h3 class="text-lg font-semibold text-gray-900">Processing</h3>
            <p class="text-gray-600">Please wait...</p>
          </div>
        </div>
      </div>
    </div>

    <div id="deleteConfirmationContent" class="hidden">
      <div class="text-center">
        <div class="mb-4">
          <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
            <i class="fas fa-exclamation-triangle text-xl text-red-600"></i>
          </div>
        </div>
        <h3 class="text-lg font-semibold text-gray-900 mb-2">Delete Address</h3>
        <p class="text-gray-600 mb-6">Are you sure you want to delete this address?</p>
        <div class="flex flex-col sm:flex-row justify-end gap-3">
          <button onclick="hideAlert()" 
            class="w-full sm:w-auto px-6 py-2.5 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors">
            Cancel
          </button>
          <button id="confirmDeleteBtn"
            class="w-full sm:w-auto px-6 py-2.5 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
            Delete
          </button>
        </div>
      </div>
    </div>

    <div id="emptyStateContent" class="hidden">
      <div class="text-center py-12 col-span-2">
        <div class="text-gray-400 mb-4">
          <i class="fas fa-map-marker-alt text-4xl"></i>
        </div>
        <h3 class="text-lg font-medium text-gray-900 mb-2">No addresses found</h3>
        <p class="text-gray-600">Add a new address to get started</p>
      </div>
    </div>

    <!-- Add these alert templates -->
    <div id="loadingAlert" class="hidden">
      <div class="text-center">
        <div class="mb-4">
          <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-blue-100">
            <i class="fas fa-spinner fa-spin text-xl text-blue-600"></i>
          </div>
        </div>
        <h3 class="text-lg font-semibold text-gray-900 mb-2">Processing</h3>
        <p class="text-gray-600">Please wait while we process your request...</p>
      </div>
    </div>

    <div id="successAlert" class="hidden">
      <div class="text-center">
        <div class="mb-4">
          <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100">
            <i class="fas fa-check text-xl text-green-600"></i>
          </div>
        </div>
        <h3 class="text-lg font-semibold text-gray-900 mb-2">Success</h3>
        <p id="successMessage" class="text-gray-600 mb-6">Operation completed successfully</p>
        <div class="flex justify-center">
          <button onclick="hideAlert()" 
            class="px-6 py-2.5 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
            OK
          </button>
        </div>
      </div>
    </div>

    <div id="errorAlert" class="hidden">
      <div class="text-center">
        <div class="mb-4">
          <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
            <i class="fas fa-times text-xl text-red-600"></i>
          </div>
        </div>
        <h3 class="text-lg font-semibold text-gray-900 mb-2">Error</h3>
        <p id="errorMessage" class="text-gray-600">An error occurred</p>
      </div>
    </div>

    <%- include("../partials/footer") %>

    <script>
      // Modal functions
      function openAddAddressModal() {
        document.getElementById('modalTitle').textContent = 'Add New Address';
        document.getElementById('addressForm').reset();
        document.getElementById('addressId').value = '';
        document.getElementById('addressModal').classList.remove('hidden');
      }

      function closeAddressModal() {
        document.getElementById('addressModal').classList.add('hidden');
      }

      function showAlert(type, message = '') {
        const modal = document.getElementById('alertModal');
        const alerts = ['successAlert', 'errorAlert', 'loadingAlert'];
        
        // Hide all alerts
        alerts.forEach(alert => {
          document.getElementById(alert).classList.add('hidden');
        });
        
        // Show selected alert
        const alertElement = document.getElementById(`${type}Alert`);
        alertElement.classList.remove('hidden');
        
        if (message) {
          if (type === 'error') {
            document.getElementById('errorMessage').textContent = message;
          } else if (type === 'success') {
            document.getElementById('successMessage').textContent = message;
          }
        }
        
        modal.classList.remove('hidden');
      }

      function hideAlert() {
        document.getElementById('alertModal').classList.add('hidden');
      }

      // Validation functions
      function validateFullName(name) {
        const nameRegex = /^[A-Za-z\s]{3,50}$/;
        if (!name || name.trim().length === 0) {
          return 'Full name is required';
        }
        if (name.trim().length < 3 || name.trim().length > 50) {
          return 'Full name must be between 3 and 50 characters';
        }
        if (!nameRegex.test(name.trim())) {
          return 'Full name can only contain letters and spaces';
        }
        return null;
      }

      function validateMobile(mobile) {
        const mobileRegex = /^[6-9]\d{9}$/;
        if (!mobile || mobile.trim().length === 0) {
          return 'Mobile number is required';
        }
        if (!mobileRegex.test(mobile.trim())) {
          return 'Please enter a valid 10-digit mobile number';
        }
        return null;
      }

      function validateAddress(address, field = 'Address') {
        if (!address || address.trim().length === 0) {
          return `${field} is required`;
        }
        if (address.trim().length < 3 || address.trim().length > 100) {
          return `${field} must be between 3 and 100 characters`;
        }
        return null;
      }

      function validateCity(city) {
        const cityRegex = /^[A-Za-z\s]{2,50}$/;
        if (!city || city.trim().length === 0) {
          return 'City is required';
        }
        if (!cityRegex.test(city.trim())) {
          return 'City can only contain letters and spaces';
        }
        return null;
      }

      function validateState(state) {
        if (!state || state.trim().length === 0) {
          return 'Please select a state';
        }
        return null;
      }

      function validatePincode(pincode) {
        const pincodeRegex = /^[1-9][0-9]{5}$/;
        if (!pincode || pincode.trim().length === 0) {
          return 'PIN code is required';
        }
        if (!pincodeRegex.test(pincode.trim())) {
          return 'Please enter a valid 6-digit PIN code';
        }
        return null;
      }

      // Real-time validation with visual feedback only
      const formInputs = [
        { id: 'fullName', validate: validateFullName },
        { id: 'mobile', validate: validateMobile },
        { id: 'addressLine1', validate: validateAddress },
        { id: 'city', validate: validateCity },
        { id: 'state', validate: validateState },
        { id: 'pincode', validate: validatePincode }
      ];

      formInputs.forEach(({ id, validate }) => {
        const input = document.getElementById(id);
        
        input.addEventListener('input', function() {
          const error = validate(this.value);
          if (error) {
            this.classList.add('border-red-300', 'focus:ring-red-500', 'focus:border-red-500');
            this.classList.remove('border-gray-300', 'focus:ring-black', 'focus:border-black');
          } else {
            this.classList.remove('border-red-300', 'focus:ring-red-500', 'focus:border-red-500');
            this.classList.add('border-gray-300', 'focus:ring-black', 'focus:border-black');
          }
          updateSubmitButton();
        });

        // Clear red border on focus
        input.addEventListener('focus', function() {
          this.classList.remove('border-red-300', 'focus:ring-red-500', 'focus:border-red-500');
          this.classList.add('border-gray-300', 'focus:ring-black', 'focus:border-black');
        });
      });

      // Form submission handler
      document.getElementById('addressForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Validation remains the same...
        for (const { id, validate } of formInputs) {
          const input = document.getElementById(id);
          const error = validate(input.value);
          
          if (error) {
            showAlert('error', error);
            input.classList.add('border-red-300');
            input.focus();
            return;
          }
        }

        try {
          showAlert('loading');
          const formData = new FormData(e.target);
          const addressId = formData.get('addressId');
          const url = addressId ? `/address/${addressId}` : '/address/add';
          
          const response = await fetch(url, {
            method: addressId ? 'PUT' : 'POST',
            headers: { 
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(Object.fromEntries(formData))
          });
          
          const data = await response.json();
          
          if (response.ok) {
            // Refresh the addresses section
            const addressesContainer = document.querySelector('.addresses-container');
            const addressResponse = await fetch('/address', {
              headers: {
                'X-Requested-With': 'XMLHttpRequest'
              }
            });
            
            if (!addressResponse.ok) throw new Error('Failed to fetch addresses');
            
            const html = await addressResponse.text();
            const temp = document.createElement('div');
            temp.innerHTML = html;
            
            // Find the new addresses container and update
            const newAddressesContent = temp.querySelector('.addresses-container');
            if (newAddressesContent) {
              addressesContainer.innerHTML = newAddressesContent.innerHTML;
            }

            // Close modal and show success message
            closeAddressModal();
            showAlert('success', addressId ? 'Address updated successfully' : 'Address added successfully');
          } else {
            throw new Error(data.error || 'Failed to save address');
          }
        } catch (error) {
          showAlert('error', error.message || 'An error occurred while saving the address');
        }
      });

      // Delete address handler
      async function deleteAddress(addressId) {
        
        const alertModal = document.getElementById('alertModal');
        const currentContent = alertModal.querySelector('.transform');
        const deleteContent = document.getElementById('deleteConfirmationContent').innerHTML;
        
        // Show delete confirmation
        currentContent.innerHTML = deleteContent;
        
        // Add click handler to delete button
        const confirmBtn = currentContent.querySelector('#confirmDeleteBtn');
        confirmBtn.onclick = async () => {
          try {
            // First hide the confirmation content
            currentContent.innerHTML = '';
            
            // Show loading alert
            const loadingAlert = document.getElementById('loadingAlert');
            if (loadingAlert) {
              currentContent.innerHTML = loadingAlert.innerHTML;
            }
            
            const response = await fetch(`/address/${addressId}`, { 
              method: 'DELETE'
            });
            
            if (response.ok) {
              // Remove the address card
              const addressCard = document.querySelector(`div[data-address-id="${addressId}"]`);
              if (addressCard) {
                addressCard.remove();
              }

              // Check remaining addresses
              const addressesContainer = document.querySelector('.addresses-container');
              const remainingAddresses = addressesContainer.querySelectorAll('div[data-address-id]');
              
              if (remainingAddresses.length === 0) {
                const emptyState = document.getElementById('emptyStateContent');
                if (emptyState) {
                  addressesContainer.innerHTML = emptyState.innerHTML;
                }
              }
              
              // Show success message
              const successAlert = document.getElementById('successAlert');
              if (successAlert) {
                currentContent.innerHTML = successAlert.innerHTML;
                const successMessage = currentContent.querySelector('#successMessage');
                if (successMessage) {
                  successMessage.textContent = 'Address deleted successfully';
                }
              }
            } else {
              throw new Error('Failed to delete address');
            }
          } catch (error) {
            console.error('Delete error:', error);
            // Show error message
            const errorAlert = document.getElementById('errorAlert');
            if (errorAlert) {
              currentContent.innerHTML = errorAlert.innerHTML;
              const errorMessage = currentContent.querySelector('#errorMessage');
              if (errorMessage) {
                errorMessage.textContent = error.message || 'An error occurred while deleting the address';
              }
            }
          }
        };
        
        alertModal.classList.remove('hidden');
      }

      function editAddress(addressId, addressData) {
        // Update modal title
        document.getElementById('modalTitle').textContent = 'Edit Address';
        
        // Fill form with existing data
        document.getElementById('addressId').value = addressId;
        document.getElementById('fullName').value = addressData.fullName;
        document.getElementById('mobile').value = addressData.mobileNumber;
        document.getElementById('addressLine1').value = addressData.addressLine1;
        document.getElementById('addressLine2').value = addressData.addressLine2 || '';
        document.getElementById('city').value = addressData.city;
        document.getElementById('state').value = addressData.state;
        document.getElementById('pincode').value = addressData.pincode;
        
        // Show modal
        document.getElementById('addressModal').classList.remove('hidden');
      }
    </script>
  </body>
</html>
