<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Product Details</title>
    <link rel="stylesheet" href="/tailwindcss/output.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
      #imageZoom {
        width: 100%;
        position: relative;
        cursor: zoom-in;
      }
      #imageZoom img {
        width: 100%;
        height: auto;
        object-fit: cover;
      }
      #imageZoom::after {
        display: var(--display);
        content: "";
        width: 100%;
        height: 100%;
        background-color: black;
        background-image: var(--url);
        background-size: 200%;
        background-position: var(--zoom-x) var(--zoom-y);
        position: absolute;
        left: 0;
        top: 0;
        pointer-events: none;
      }

      .product-thumbnails::-webkit-scrollbar {
        width: 6px;
        height: 6px;
      }
      
      .product-thumbnails::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 10px;
      }
      
      .product-thumbnails::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 10px;
      }

      .product-thumbnails::-webkit-scrollbar-thumb:hover {
        background: #555;
      }
    </style>
  </head>

  <body class="bg-gray-300">
    <%- include("../partials/nav") %>
    
    <!-- Main Content -->
    <div class="min-h-screen pt-20">
      <!-- Breadcrumb -->
      <nav class="max-w-7xl mx-auto px-4 py-4">
        <ol class="flex items-center space-x-2 text-sm">
          <li><a href="/home" class="text-gray-500 hover:text-gray-900 transition-colors">Home</a></li>
          <li><span class="text-gray-400">/</span></li>
          <li><a href="/shop" class="text-gray-500 hover:text-gray-900 transition-colors">Shop</a></li>
          <li><span class="text-gray-400">/</span></li>
          <li class="text-gray-900 font-medium"><%= product.brand %> <%= product.productName %></li>
        </ol>
      </nav>

      <!-- Product Section -->
      <div class="max-w-7xl mx-auto px-4 py-8">
        <div class="bg-white rounded-2xl shadow-[0_8px_30px_rgb(0,0,0,0.12)] p-6 md:p-8">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <!-- Image Gallery Section -->
            <div class="space-y-4">
              <!-- Main Image with Zoom -->
              <div class="bg-gray-50 rounded-2xl p-4">
                <div id="imageZoom" class="aspect-square" style="--url: url(<%= product.imageUrl[0] %>); --zoom-x: 0%; --zoom-y: 0%; --display: none;">
                  <img 
                    id="main-product-image"
                    src="<%= product.imageUrl[0] %>"
                    alt="<%= product.productName %>"
                    class="w-full h-full object-cover rounded-xl"
                  />
                </div>
              </div>
              
              <!-- Thumbnails -->
              <div class="product-thumbnails flex space-x-4 overflow-x-auto py-2">
                <% product.imageUrl.forEach((image, index) => { %>
                  <img 
                    src="<%= image %>" 
                    alt="<%= product.productName %> view <%= index + 1 %>"
                    class="w-20 h-20 rounded-xl cursor-pointer object-cover border-2 border-transparent hover:border-gray-900 transition-all"
                    onclick="updateMainImage('<%= image %>')"
                  />
                <% }) %>
              </div>
            </div>

            <!-- Product Info Section -->
            <div class="space-y-6">
              <!-- Brand & Title -->
              <div>
                <div class="flex items-center gap-2 mb-2">
                  <span class="w-8 h-[2px] bg-gray-900"></span>
                  <span class="text-gray-500 text-sm tracking-wider uppercase"><%= product.brand %></span>
                </div>
                <h1 class="text-3xl font-bold text-gray-900"><%= product.productName %></h1>
              </div>

              <!-- Rating -->
              <div class="flex items-center gap-2">
                <div class="flex text-yellow-400">
                  <% for(let i = 1; i <= 5; i++) { %>
                    <i class="fas fa-star <%= i <= product.rating ? '' : 'text-gray-200' %>"></i>
                  <% } %>
                </div>
                <span class="text-gray-500">(<%= product.rating || 'No rating' %>)</span>
              </div>

              <!-- Price -->
              <div class="space-y-2">
                <% if (product.discountPrice < product.originalPrice) { %>
                  <div class="flex items-baseline gap-3">
                    <span class="text-4xl font-bold text-gray-900">₹<%= product.discountPrice %></span>
                    <span class="text-xl text-gray-400 line-through">₹<%= product.originalPrice %></span>
                    <span class="bg-white/90 backdrop-blur-sm text-gray-900 px-3 py-1 rounded-full text-sm font-medium">
                      -<%= Math.round((product.originalPrice - product.discountPrice) / product.originalPrice * 100) %>%
                    </span>
                  </div>
                <% } else { %>
                  <span class="text-4xl font-bold text-gray-900">₹<%= product.originalPrice %></span>
                <% } %>
              </div>

              <!-- Stock Status -->
              <div>
                <% if (product.stock === 0) { %>
                  <div class="inline-flex items-center px-4 py-2 bg-red-50 text-red-700 rounded-full text-sm font-medium">
                    <i class="fas fa-times-circle mr-2"></i>
                    Out of Stock
                  </div>
                <% } else { %>
                  <div class="inline-flex items-center px-4 py-2 bg-green-50 text-green-700 rounded-full text-sm font-medium">
                    <i class="fas fa-check-circle mr-2"></i>
                    In Stock (<%= product.stock %> available)
                  </div>
                <% } %>
              </div>

              <!-- Product Details -->
              <div class="border-t border-gray-100 pt-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Product Details</h3>
                <dl class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                  <div>
                    <dt class="text-sm text-gray-500">Brand</dt>
                    <dd class="text-sm font-medium text-gray-900"><%= product.brand.toUpperCase() %></dd>
                  </div>
                  <div>
                    <dt class="text-sm text-gray-500">Gender</dt>
                    <dd class="text-sm font-medium text-gray-900"><%= product.gender.toUpperCase() %></dd>
                  </div>
                  <div>
                    <dt class="text-sm text-gray-500">Color</dt>
                    <dd class="text-sm font-medium text-gray-900"><%= product.color.toUpperCase() %></dd>
                  </div>
                </dl>
              </div>

              <!-- Actions -->
              <div class="flex gap-4 pt-6">
                <% if (product.stock > 0) { %>
                  <button 
                    id="cartButton-<%= product._id %>"
                    onclick="handleCartAction('<%= product._id %>')"
                    class="flex-1 px-6 py-4 bg-gray-900 text-white rounded-xl font-medium hover:bg-gray-800 transition-all transform hover:scale-[1.02] active:scale-[0.98] flex items-center justify-center gap-2"
                  >
                    <i class="fas fa-shopping-cart"></i>
                    Add To Cart
                  </button>
                <% } %>
                
                <button 
                  onclick="toggleWishlist('<%= product._id %>')"
                  id="wishlist-btn-<%= product._id %>"
                  class="p-4 bg-white text-gray-800 rounded-xl font-medium hover:bg-gray-50 border border-gray-200 transition-all transform hover:scale-[1.02] active:scale-[0.98]"
                >
                  <i class="far fa-heart text-xl"></i>
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Related Products -->
        <div class="mt-16">
          <div class="flex flex-col sm:flex-row justify-between items-start sm:items-end mb-8">
            <div>
              <div class="flex items-center gap-2 mb-2">
                <span class="w-8 h-[2px] bg-gray-900"></span>
                <span class="text-gray-500 text-sm tracking-wider uppercase">Related</span>
              </div>
              <h2 class="text-3xl font-bold text-gray-900">You May Also Like</h2>
            </div>
          </div>

          <div class="flex overflow-x-auto gap-4 sm:grid sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 sm:gap-6 pb-4 sm:pb-0">
            <% relatedProducts.forEach(product => { %>
              <a href="/product/<%= product._id %>" class="group min-w-[240px] sm:min-w-0">
                <div class="bg-white rounded-2xl overflow-hidden hover:shadow-[0_8px_30px_rgb(0,0,0,0.12)] transition-all duration-300">
                  <!-- Product Image -->
                  <div class="relative aspect-square overflow-hidden bg-gray-100">
                    <img
                      src="<%= product.imageUrl[0] %>"
                      alt="<%= product.productName %>"
                      class="w-full h-full object-cover transform transition-all duration-500 group-hover:scale-105"
                      loading="lazy"
                    />
                    <% if (product.discountPrice < product.originalPrice) { %>
                      <div class="absolute top-3 right-3 bg-white/90 backdrop-blur-sm text-gray-900 px-3 py-1 rounded-full text-xs font-medium">
                        -<%= Math.round((product.originalPrice - product.discountPrice) / product.originalPrice * 100) %>%
                      </div>
                    <% } %>
                  </div>

                  <!-- Product Info -->
                  <div class="p-5">
                    <!-- Brand & Rating -->
                    <div class="flex justify-between items-center mb-2">
                      <div class="text-sm text-gray-500 font-medium"><%= product.brand %></div>
                      <div class="flex items-center gap-1">
                        <i class="fas fa-star text-yellow-400 text-xs"></i>
                        <span class="text-sm text-gray-500"><%= product.rating %></span>
                      </div>
                    </div>
                    
                    <!-- Product Name -->
                    <h3 class="text-gray-900 font-medium mb-2 truncate group-hover:text-gray-700 transition-colors">
                      <%= product.productName %>
                    </h3>
                    
                    <!-- Price -->
                    <div class="flex items-baseline gap-2">
                      <span class="text-lg font-bold text-gray-900">₹<%= product.discountPrice %></span>
                      <% if (product.discountPrice < product.originalPrice) { %>
                        <span class="text-sm text-gray-400 line-through">₹<%= product.originalPrice %></span>
                      <% } %>
                    </div>
                  </div>
                </div>
              </a>
            <% }) %>
          </div>
        </div>
      </div>
    </div>

    <%- include("../partials/footer") %>

    <!-- Modal Backdrop -->
    <div id="modalBackdrop" class="fixed inset-0 bg-black/50 z-40 hidden transition-opacity duration-300 opacity-0"></div>

    <!-- Alert Modal -->
    <div id="alertModal" class="fixed inset-0 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-2xl p-8 max-w-sm w-full mx-4 transform transition-all duration-300 scale-90 opacity-0 translate-y-4">
            <!-- Success Template -->
            <div id="successAlert" class="hidden">
                <div class="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-green-100 mb-6">
                    <i class="fas fa-check text-2xl text-green-600"></i>
                </div>
                <h3 class="text-xl font-semibold text-center text-gray-900 mb-2">Success!</h3>
                <p id="successMessage" class="text-gray-600 text-center mb-6">Item added to cart successfully</p>
                <div class="flex gap-3">
                    <button onclick="hideAlert()" class="flex-1 py-3 px-4 bg-gray-100 hover:bg-gray-200 text-gray-800 rounded-xl transition-colors duration-200">
                        Continue Shopping
                    </button>
                    <button onclick="window.location.href='/cart'" class="flex-1 py-3 px-4 bg-black hover:bg-gray-800 text-white rounded-xl transition-colors duration-200">
                        View Cart
                    </button>
                </div>
            </div>

            <!-- Error Template -->
            <div id="errorAlert" class="hidden">
                <div class="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-red-100 mb-6">
                    <i class="fas fa-exclamation text-2xl text-red-600"></i>
                </div>
                <h3 class="text-xl font-semibold text-center text-gray-900 mb-2">Error</h3>
                <p id="errorMessage" class="text-gray-600 text-center mb-6">Something went wrong</p>
                <button onclick="hideAlert()" class="w-full py-3 px-4 bg-black hover:bg-gray-800 text-white rounded-xl transition-colors duration-200">
                    Try Again
                </button>
            </div>

            <!-- Loading Template -->
            <div id="loadingAlert" class="hidden">
                <div class="mx-auto flex items-center justify-center h-16 w-16 mb-6">
                    <div class="animate-spin rounded-full h-12 w-12 border-4 border-gray-200 border-t-black"></div>
                </div>
                <h3 class="text-xl font-semibold text-center text-gray-900 mb-2">Processing</h3>
                <p class="text-gray-600 text-center">Please wait...</p>
            </div>
        </div>
    </div>

    <div id="toast-container" class="fixed top-20 right-4 z-50 flex flex-col gap-2"></div>

    <script>
      // Image zoom functionality
      const imageZoom = document.getElementById('imageZoom');

      imageZoom.addEventListener('mousemove', (event) => {
        imageZoom.style.setProperty('--display', 'block');
        const pointer = {
          x: (event.offsetX * 100) / imageZoom.offsetWidth,
          y: (event.offsetY * 100) / imageZoom.offsetHeight,
        };
        imageZoom.style.setProperty('--zoom-x', pointer.x + '%');
        imageZoom.style.setProperty('--zoom-y', pointer.y + '%');
      });

      imageZoom.addEventListener('mouseout', () => {
        imageZoom.style.setProperty('--display', 'none');
      });

      // Update main image
      function updateMainImage(imageUrl) {
        document.getElementById('main-product-image').src = imageUrl;
        imageZoom.style.setProperty('--url', `url(${imageUrl})`);
      }

      // Add to wishlist functionality
      async function addToWishlist(productId) {
        try {
            const loadingId = showToast('loading', 'Adding to wishlist...');
            
            const response = await fetch('/wishlist/add', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ productId })
            });

            removeToast(loadingId);

            if (response.ok) {
                showToast('success', 'Added to wishlist');
            } else {
                const data = await response.json();
                throw new Error(data.message);
            }
        } catch (error) {
            showToast('error', error.message || 'Failed to add to wishlist');
        }
      }

      async function toggleWishlist(productId) {
        try {
            const wishlistBtn = document.querySelector(`#wishlist-btn-${productId} i`);
            const isInWishlist = wishlistBtn.classList.contains('fas');
            const loadingId = showToast('loading', isInWishlist ? 'Removing from wishlist...' : 'Adding to wishlist...');

            if (isInWishlist) {
                const response = await fetch(`/wishlist/remove/${productId}`, {
                    method: 'DELETE'
                });
                const data = await response.json();
                removeToast(loadingId);

                if (data.success) {
                    wishlistBtn.classList.replace('fas', 'far');
                    wishlistBtn.classList.remove('text-red-500');
                    showToast('success', 'Removed from wishlist');
                }
            } else {
                const response = await fetch('/wishlist/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ productId })
                });
                const data = await response.json();
                removeToast(loadingId);

                if (response.ok) {
                    wishlistBtn.classList.replace('far', 'fas');
                    wishlistBtn.classList.add('text-red-500');
                    showToast('success', 'Added to wishlist');
                }
            }
        } catch (error) {
            showToast('error', 'Failed to update wishlist');
        }
      }

      // Check initial wishlist status when page loads
      document.addEventListener('DOMContentLoaded', async () => {
        try {
            const response = await fetch(`/wishlist/check/<%= product._id %>`);
            const data = await response.json();

            if (data.success && data.isInWishlist) {
                const wishlistBtn = document.querySelector(`#wishlist-btn-<%= product._id %> i`);
                wishlistBtn.classList.replace('far', 'fas');
                wishlistBtn.classList.add('text-red-500');
            }
        } catch (error) {
            console.error('Error checking wishlist status:', error);
        }
      });


      function showToast(type, message) {
        const container = document.getElementById('toast-container');
        const toast = document.createElement('div');
        const id = Date.now();
        
        // Base classes for toast
        let baseClasses = 'transform transition-all duration-300 ease-out flex items-center gap-3 p-4 rounded-lg shadow-lg max-w-xs translate-x-full';
        let icon, bgColor;
        
        // Set styles based on type
        switch(type) {
            case 'success':
                bgColor = 'bg-green-50 text-green-800 border border-green-100';
                icon = '<i class="fas fa-check-circle text-green-500 text-lg"></i>';
                break;
            case 'error':
                bgColor = 'bg-red-50 text-red-800 border border-red-100';
                icon = '<i class="fas fa-exclamation-circle text-red-500 text-lg"></i>';
                break;
            case 'loading':
                bgColor = 'bg-gray-50 text-gray-800 border border-gray-100';
                icon = '<div class="animate-spin rounded-full h-5 w-5 border-2 border-gray-200 border-t-gray-600"></div>';
                break;
            default:
                bgColor = 'bg-gray-50 text-gray-800 border border-gray-100';
                icon = '<i class="fas fa-info-circle text-gray-500 text-lg"></i>';
        }

        // Set toast HTML
        toast.className = `${baseClasses} ${bgColor}`;
        toast.id = `toast-${id}`;
        toast.innerHTML = `
            ${icon}
            <p class="text-sm font-medium">${message}</p>
            <button onclick="removeToast('${id}')" class="ml-auto text-gray-400 hover:text-gray-600 transition-colors">
                <i class="fas fa-times"></i>
            </button>
        `;

        // Add toast to container
        container.appendChild(toast);

        // Trigger animation
        requestAnimationFrame(() => {
            toast.classList.remove('translate-x-full');
            toast.classList.add('translate-x-0');
        });

        // Auto remove after delay (except for loading)
        if (type !== 'loading') {
            setTimeout(() => removeToast(id), 3000);
        }

        return id;
      }

      function removeToast(id) {
        const toast = document.getElementById(`toast-${id}`);
        if (!toast) return;

        // Animate out
        toast.classList.remove('translate-x-0');
        toast.classList.add('translate-x-full');

        // Remove after animation
        setTimeout(() => toast.remove(), 300);
      }

      async function handleCartAction(productId) {
        const button = document.getElementById(`cartButton-${productId}`);
        
        if (button.classList.contains('in-cart')) {
            // If already in cart, go to cart page
            window.location.href = '/cart';
            return;
        }

        try {
            const loadingId = showToast('loading', 'Adding to cart...');

            const response = await fetch('/cart/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    productId,
                    quantity: 1
                })
            });

            const data = await response.json();
            removeToast(loadingId);

            if (response.ok) {
                showToast('success', data.message);
                
                // Update cart count in navbar
                const cartCountElement = document.querySelector('.cart-count');
                if (cartCountElement) {
                    cartCountElement.textContent = data.cartCount;
                }

                // Update button appearance and function
                button.classList.add('in-cart', 'bg-green-600', 'hover:bg-green-700');
                button.classList.remove('bg-gray-900', 'hover:bg-gray-800');
                button.innerHTML = `
                    <i class="fas fa-shopping-bag"></i>
                    Go to Cart
                `;
            } else {
                showToast('error', data.message);
            }
        } catch (error) {
            showToast('error', 'Failed to add item to cart');
        }
      }
    </script>
  </body>
</html>
