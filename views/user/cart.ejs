<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Shopping Cart - Virtue Rider</title>
    <link rel="stylesheet" href="/tailwindcss/output.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
    <style>
      .main-wrapper {
        background-image: linear-gradient(135deg, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.5) 100%), url('/images/vere.jpg');
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        min-height: 100vh;
      }

      .glass-card {
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(8px);
        border: 1px solid rgba(255, 255, 255, 0.3);
      }

      .input-style {
        background: rgba(255, 255, 255, 0.15);
        border: 1px solid rgba(255, 255, 255, 0.3);
        color: white;
      }

      .quantity-btn {
        transition: all 0.2s ease;
        background: rgba(255, 255, 255, 0.15);
      }

      .quantity-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
      }

      .quantity-btn:not(:disabled):hover {
        background: rgba(255, 255, 255, 0.25);
        transform: scale(1.05);
      }

      .quantity-btn:not(:disabled):active {
        transform: scale(0.95);
      }

      .cart-item {
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      }

      .cart-item:last-child {
        border-bottom: none;
      }
    </style>
  </head>

  <body>
    <%- include("../partials/nav") %>

    <div class="main-wrapper pt-20">
      <div class="container mx-auto px-4">
        <div class="flex flex-col md:flex-row gap-6 py-8">
          <!-- Main Content -->
          <div class="md:w-3/4">
            <div class="glass-card rounded-xl p-8">
              <h1 class="text-3xl font-bold text-white mb-8">Shopping Cart</h1>
              
              <% if (cartItems && cartItems.length > 0) { %>
                <div class="space-y-6">
                  <% cartItems.forEach(item => { %>
                    <div class="cart-item flex items-center pb-6" id="cart-item-<%= item.product._id %>">
                      <img src="<%= item.product.imageUrl %>"
                           alt="<%= item.product.productName %>"
                           class="w-32 h-32 object-cover rounded-xl" />
                      
                      <div class="flex-1 ml-6">
                        <div class="flex justify-between items-start">
                          <div>
                            <h3 class="text-lg font-semibold text-white">
                              <%= item.product.productName %>
                            </h3>
                            <p class="text-white/70 text-sm mt-1">
                              Color: <%= item.product.color %>
                            </p>
                            <p class="text-white/70 text-sm mt-1">
                              Size: <%= item.variant ? item.variant.size : 'N/A' %>
                            </p>
                            <p class="text-green-400 text-sm mt-1">
                              <%= item.variant.stock > 0 ? 'In Stock' : 'Out of Stock' %>
                            </p>
                          </div>
                          <button onclick="removeFromCart(this, '<%= item.product._id %>', '<%= item.variant ? item.variant._id : null %>')"
                                  class="text-red-400 hover:text-red-300 transition-colors">
                            <i class="fas fa-trash-alt"></i>
                          </button>
                        </div>

                        <div class="flex justify-between items-center mt-4">
                          <div class="flex items-center space-x-2">
                            <button class="quantity-btn text-white w-8 h-8 rounded-full disabled:opacity-50 disabled:cursor-not-allowed transition-all"
                                    onclick="updateQuantity(this, '<%= item.product._id %>', '<%= item.variant._id %>', 'decrease')"
                                    <%= item.quantity <= 1 ? 'disabled' : '' %>>
                              <i class="fas fa-minus"></i>
                            </button>
                            <span class="quantity-display w-8 text-center font-medium text-white">
                              <%= item.quantity %>
                            </span>
                            <button class="quantity-btn text-white w-8 h-8 rounded-full disabled:opacity-50 disabled:cursor-not-allowed transition-all"
                                    onclick="updateQuantity(this, '<%= item.product._id %>', '<%= item.variant._id %>', 'increase')"
                                    <%= item.quantity >= item.variant.stock || item.quantity >= 3 ? 'disabled' : '' %>>
                              <i class="fas fa-plus"></i>
                            </button>
                          </div>
                          <div class="text-right">
                            <div class="text-lg font-semibold text-white" id="subtotal-<%= item.product._id %>">
                              ₹<%= item.subtotal %>
                            </div>
                            <div class="text-sm text-white/70">
                              ₹<%= item.price %> each
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  <% }); %>
                </div>
              <% } else { %>
                <div class="text-center py-12">
                  <div class="text-white/40 mb-4">
                    <i class="fas fa-shopping-cart text-4xl"></i>
                  </div>
                  <h3 class="text-lg font-medium text-white mb-2">Your cart is empty</h3>
                  <p class="text-white/60 mb-6">Start adding items to your cart</p>
                  <a href="/shop" class="inline-block bg-white text-black px-6 py-3 rounded-lg hover:bg-opacity-90 transition-colors">
                    Continue Shopping
                  </a>
                </div>
              <% } %>
            </div>
          </div>

          <!-- Order Summary -->
          <div class="md:w-1/4">
            <div class="glass-card rounded-xl p-6 sticky top-24">
              <h2 class="text-xl font-bold text-white mb-6">Order Summary</h2>
              
              <div class="space-y-4 mb-6">
                <div class="flex justify-between text-white/70">
                  <span id="items-count">Subtotal (<%= cartItems.length %> items)</span>
                  <span id="subtotal-amount">₹<%= total %></span>
                </div>
                <div class="flex justify-between text-white/70">
                  <span>Shipping</span>
                  <span class="text-green-400">Free</span>
                </div>
              </div>

              <div class="border-t border-white/10 pt-4 mb-6">
                <div class="flex justify-between items-center">
                  <span class="text-white/90">Total Amount</span>
                  <span class="text-xl font-bold text-white" id="total-amount">₹<%= total %></span>
                </div>
              </div>

              <% if (cartItems && cartItems.length > 0) { %>
                <button onclick="location.href='/checkout'" 
                        class="w-full bg-white text-black py-3 rounded-xl font-medium hover:bg-opacity-90 transition-all">
                  Proceed to Checkout
                </button>
              <% } else { %>
                <button disabled 
                        class="w-full bg-white/20 text-white/60 py-3 rounded-xl font-medium cursor-not-allowed">
                  Cart is Empty
                </button>
              <% } %>

              <div class="mt-4 text-center text-xs text-white/60">
                <p class="flex items-center justify-center gap-2">
                  <i class="fas fa-shield-alt"></i>
                  Secure Checkout
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Footer -->
    <%- include('../partials/footer') %>

    <!-- Modal Backdrop -->
    <div id="modalBackdrop" class="fixed inset-0 bg-black/50 z-40 hidden transition-opacity duration-300 opacity-0"></div>

    <!-- Alert Modal -->
    <div id="alertModal" class="fixed inset-0 flex items-center justify-center z-50 hidden">
      <div class="bg-white rounded-2xl p-8 max-w-sm w-full mx-4 transform transition-all duration-300 scale-90 opacity-0 translate-y-4">
        <!-- Success Template -->
        <div id="successAlert" class="hidden">
          <div class="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-green-100 mb-6">
            <i class="fas fa-check text-2xl text-green-600"></i>
          </div>
          <h3 class="text-xl font-semibold text-center text-gray-900 mb-2">Success!</h3>
          <p id="successMessage" class="text-gray-600 text-center mb-6">Item removed successfully</p>
          <button onclick="hideAlert()" class="w-full py-3 px-4 bg-black hover:bg-gray-800 text-white rounded-xl transition-colors duration-200">
            Continue
          </button>
        </div>

        <!-- Error Template -->
        <div id="errorAlert" class="hidden">
          <div class="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-red-100 mb-6">
            <i class="fas fa-exclamation text-2xl text-red-600"></i>
          </div>
          <h3 class="text-xl font-semibold text-center text-gray-900 mb-2">Error</h3>
          <p id="errorMessage" class="text-gray-600 text-center mb-6">Something went wrong</p>
          <button onclick="hideAlert()" class="w-full py-3 px-4 bg-black hover:bg-gray-800 text-white rounded-xl transition-colors duration-200">
            Try Again
          </button>
        </div>

        <!-- Confirmation Template -->
        <div id="confirmAlert" class="hidden">
          <div class="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-yellow-100 mb-6">
            <i class="fas fa-question text-2xl text-yellow-600"></i>
          </div>
          <h3 class="text-xl font-semibold text-center text-gray-900 mb-2">Remove Item?</h3>
          <p class="text-gray-600 text-center mb-6">Are you sure you want to remove this item from your cart?</p>
          <div class="flex gap-4">
            <button id="confirmYes" class="flex-1 py-3 px-4 bg-black hover:bg-gray-800 text-white rounded-xl transition-colors duration-200">
              Yes, remove it
            </button>
            <button onclick="hideAlert()" class="flex-1 py-3 px-4 bg-red-600 hover:bg-red-700 text-white rounded-xl transition-colors duration-200">
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>

    <script>
      let updateTimeout;
      let isUpdating = false;

      function checkProductAvailability(item) {
          if (!item.product.isActive || !item.product.categoriesId) {
              showAlert('error', 'This product is no longer available');
              removeFromCart(null, item.product._id);
              return false;
          }
          return true;
      }

      async function updateQuantity(button, productId, variantId, action) {
        const cartItem = button.closest('[id^="cart-item-"]');
        if (!cartItem) return;

        const quantityDisplay = cartItem.querySelector('.quantity-display');
        const currentQuantity = parseInt(quantityDisplay.textContent);
        
        let newQuantity;
        if (action === 'increase') {
            if (currentQuantity >= 3) return;
            newQuantity = currentQuantity + 1;
        } else {
            if (currentQuantity <= 1) return;
            newQuantity = currentQuantity - 1;
        }

        // Disable buttons during update
        const buttons = cartItem.querySelectorAll('.quantity-btn');
        buttons.forEach(btn => btn.disabled = true);

        try {
            const response = await fetch('/cart/update-quantity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    productId,
                    variantId,
                    quantity: newQuantity
                })
            });

            const data = await response.json();

            if (data.success) {
                // Update quantity display
                quantityDisplay.textContent = newQuantity;

                // Update subtotal
                const subtotalElement = cartItem.querySelector(`#subtotal-${productId}`);
                if (subtotalElement) {
                    subtotalElement.textContent = `₹${data.subtotal}`;
                }

                // Update all total elements
                const totalElements = document.querySelectorAll('#total, #total-amount, #subtotal-amount');
                totalElements.forEach(el => {
                    if (el.id === 'total') {
                        el.textContent = `Total: ₹${data.total}`;
                    } else {
                        el.textContent = `₹${data.total}`;
                    }
                });

                // Update button states based on stock and quantity
                const minusBtn = cartItem.querySelector('.quantity-btn:first-child');
                const plusBtn = cartItem.querySelector('.quantity-btn:last-child');
                
                if (minusBtn) minusBtn.disabled = newQuantity <= 1;
                if (plusBtn) plusBtn.disabled = newQuantity >= data.stock || newQuantity >= 3;

                // Success feedback
                button.classList.add('bg-green-200');
                setTimeout(() => button.classList.remove('bg-green-200'), 300);
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            // Revert quantity display
            quantityDisplay.textContent = currentQuantity;
            
            // Error feedback
            button.classList.add('bg-red-200');
            setTimeout(() => button.classList.remove('bg-red-200'), 300);
            
            showAlert('error', error.message || 'Failed to update quantity');
        } finally {
            // Re-enable buttons
            buttons.forEach(btn => btn.disabled = false);
        }
      }

      function showAlert(type, message = '') {
        const modal = document.getElementById('alertModal');
        const backdrop = document.getElementById('modalBackdrop');
        const modalContent = modal.querySelector('div > div');
        
        // Hide all alert types
        document.getElementById('successAlert').classList.add('hidden');
        document.getElementById('errorAlert').classList.add('hidden');
        document.getElementById('confirmAlert').classList.add('hidden');
        
        // Show selected alert type
        const alertElement = document.getElementById(`${type}Alert`);
        alertElement.classList.remove('hidden');
        
        if (message) {
          const messageElement = document.getElementById(`${type}Message`);
          if (messageElement) {
            messageElement.textContent = message;
          }
        }
        
        // Show modal with animation
        modal.classList.remove('hidden');
        backdrop.classList.remove('hidden');
        setTimeout(() => {
          backdrop.classList.remove('opacity-0');
          modalContent.classList.remove('scale-90', 'opacity-0', 'translate-y-4');
        }, 50);

        return new Promise((resolve) => {
          if (type === 'confirm') {
            document.getElementById('confirmYes').onclick = () => {
              hideAlert();
              resolve(true);
            };
          } else if (type === 'success') {
            const continueButton = alertElement.querySelector('button');
            continueButton.onclick = () => {
              hideAlert();
              window.location.reload();
            };
          }
        });
      }

      function hideAlert() {
        const modal = document.getElementById('alertModal');
        const backdrop = document.getElementById('modalBackdrop');
        const modalContent = modal.querySelector('div > div');
        
        backdrop.classList.add('opacity-0');
        modalContent.classList.add('scale-90', 'opacity-0', 'translate-y-4');
        
        setTimeout(() => {
          modal.classList.add('hidden');
          backdrop.classList.add('hidden');
        }, 0);
      }

      async function removeFromCart(button, productId, variantId) {
        try {
            const confirmed = await showAlert('confirm');
            
            if (!confirmed) return;

            // Log the request details for debugging
            console.log('Removing item:', { productId, variantId });

            const response = await fetch(`/cart/remove/${productId}/${variantId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            // Log the response for debugging
            console.log('Response status:', response.status);

            // Check if response is ok before trying to parse JSON
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            console.log('Response data:', data);

            // Remove the item from the cart UI
            const cartItem = document.getElementById(`cart-item-${productId}`);
            if (cartItem) {
                cartItem.remove();
            }

            // Update totals
            updateCartTotals(data.total);
            
            // Show success message
            await showAlert('success', data.message);
            
            // Reload if cart is empty
            if (data.itemCount === 0) {
                window.location.reload();
            }
        } catch (error) {
            console.error('Error removing item:', error);
            showAlert('error', 'Failed to remove item from cart');
        }
      }

      function updateCartTotals(total) {
        // Update all total elements
        const totalElements = document.querySelectorAll('#total, #total-amount, #subtotal-amount');
        totalElements.forEach(el => {
            if (el.id === 'total') {
                el.textContent = `Total: ₹${total}`;
            } else {
                el.textContent = `₹${total}`;
            }
        });

        // Update items count
        const itemsCount = document.getElementById('items-count');
        const cartItems = document.querySelectorAll('[id^="cart-item-"]');
        if (itemsCount) {
            itemsCount.textContent = `Subtotal (${cartItems.length} items)`;
        }

        // If cart is empty, reload page to show empty cart message
        if (cartItems.length === 0) {
            window.location.reload();
        }
      }
      
    </script>
  </body>
</html>
