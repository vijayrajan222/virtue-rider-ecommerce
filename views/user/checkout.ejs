<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="tailwindcss/output.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    />
    <title>Checkout - Virtue Rider</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js" defer></script>
  </head>
  <body class="bg-gray-100">
    <%- include("../partials/nav") %>

    <!-- Main Container -->
    <div class="container mx-auto px-4 py-8 mt-20 sm:mt-28 max-w-7xl">
      <!-- Checkout Layout -->
      <div class="flex flex-col lg:flex-row gap-6 lg:gap-8">
        <!-- Left Section - Address and Payment -->
        <div class="lg:w-2/3 space-y-6">
          <!-- Address Selection -->
          <div class="bg-white p-4 sm:p-6 rounded-2xl shadow-sm">
            <div class="flex items-center justify-between mb-6">
              <h2 class="text-xl sm:text-2xl font-bold text-gray-800">
                Delivery Address
              </h2>
              <button
                onclick="window.location.href='/address'"
                class="text-sm bg-gray-100 text-gray-800 px-4 py-2 rounded-xl font-medium hover:bg-gray-200 transition-colors flex items-center gap-2"
              >
                <i class="fas fa-plus"></i>
                <span class="hidden sm:inline">Add New</span>
              </button>
            </div>

            <div class="space-y-4">
              <% if (addresses && addresses.length > 0) { %>
              <div class="grid gap-4 sm:grid-cols-2">
                <% addresses.forEach((address, index) => { %>
                <div
                  class="border rounded-xl p-4 hover:border-black transition-colors"
                >
                  <label class="flex items-start gap-4 cursor-pointer">
                    <input type="radio" name="selectedAddress" value="<%=
                    address._id %>" class="mt-1" <%= index === 0 ? 'checked' :
                    '' %> >
                    <div class="space-y-1">
                      <p class="font-medium"><%= address.fullName %></p>
                      <p class="text-sm text-gray-600">
                        <%= address.addressLine1 %>
                      </p>
                      <p class="text-sm text-gray-600">
                        <%= address.addressLine2 %>
                      </p>
                      <p class="text-sm text-gray-600">
                        <%= address.city %>, <%= address.state %> <%=
                        address.pincode %>
                      </p>
                      <p class="text-sm text-gray-600">
                        Phone: <%= address.mobileNumber %>
                      </p>
                    </div>
                  </label>
                </div>
                <% }); %>
              </div>
              <% } else { %>
              <div class="text-center py-8 bg-gray-50 rounded-xl">
                <p class="text-gray-500 mb-4">No addresses found</p>
                <button
                  onclick="window.location.href='/address'"
                  class="inline-flex items-center gap-2 bg-black text-white px-6 py-2 rounded-lg hover:bg-gray-800 transition-colors"
                >
                  <i class="fas fa-plus"></i>
                  Add Your First Address
                </button>
              </div>
              <% } %>
            </div>
          </div>

          <!-- Payment Method -->
          <div class="bg-white p-4 sm:p-6 rounded-2xl shadow-sm">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-800 mb-6">
              Payment Method
            </h2>

            <div class="space-y-4">
              <!-- Payment Options -->
              <div class="grid gap-4">
                <!-- COD Payment Option -->
                <label
                  id="codOption"
                  class="flex items-center gap-3 p-3 border rounded-lg cursor-pointer transition-all duration-300"
                  data-final-total="<%= finalTotal %>"
                >
                  <input
                    type="radio"
                    name="paymentMethod"
                    value="cod"
                    id="codPayment"
                  />
                  <div class="flex flex-col">
                    <span class="flex items-center gap-2">
                      <i class="fas fa-money-bill"></i> Cash on Delivery
                      <span
                        id="codAvailability"
                        class="text-xs px-2 py-1 rounded hidden"
                      ></span>
                    </span>
                    <span class="text-sm text-gray-500" id="codMessage">
                      Pay when you receive the order
                    </span>
                  </div>
                </label>

                <!-- Online Payment Option -->
                <label
                  class="flex items-center gap-3 p-3 border rounded-lg cursor-pointer hover:bg-gray-50"
                >
                  <input
                    type="radio"
                    name="paymentMethod"
                    value="online"
                    id="onlinePayment"
                  />
                  <div class="flex flex-col">
                    <span class="flex items-center gap-2">
                      <i class="fas fa-credit-card"></i> Online Payment
                    </span>
                    <span class="text-sm text-gray-500">
                      Pay securely with Razorpay
                    </span>
                  </div>
                </label>
              </div>
            </div>
          </div>
        </div>

        <!-- Right Section - Order Summary -->
        <div class="lg:w-1/3">
          <div class="bg-white p-4 sm:p-6 rounded-2xl shadow-sm sticky top-24">
            <h2 class="text-xl font-bold text-gray-800 mb-6">Order Summary</h2>

            <!-- Items Summary -->
            <div class="space-y-4 max-h-[40vh] overflow-y-auto mb-6 pr-2">
              <% cartItems.forEach(item => { %>
              <div class="flex gap-4 p-2 hover:bg-gray-50 rounded-lg transition-colors">
                <img
                  src="<%= item.product.imageUrl %>"
                  alt="<%= item.product.name %>"
                  class="w-20 h-20 object-cover rounded-lg"
                />
                <div class="flex-1 min-w-0">
                  <h4 class="font-medium truncate">
                    <%= item.product.name %>
                  </h4>
                  <p class="text-sm text-gray-500">
                    Size: <%= item.variant %> | Qty: <%= item.quantity %>
                  </p>
                  <div class="flex items-baseline gap-2 flex-wrap">
                    <% if (item.offer) { %>
                      <span class="text-base font-medium text-gray-900">
                        ₹<%= item.discountedPrice.toFixed(2) %>
                      </span>
                      <span class="text-sm text-gray-500 line-through">
                        ₹<%= item.price.toFixed(2) %>
                      </span>
                      <span class="text-xs text-green-600">
                        <%= item.offer.discountType === 'percentage' ? 
                            `${item.offer.discountAmount}% off` : 
                            `₹${item.offer.discountAmount} off` %>
                      </span>
                    <% } else { %>
                      <span class="text-base font-medium text-gray-900">
                        ₹<%= item.price.toFixed(2) %>
                      </span>
                    <% } %>
                  </div>
                  <div class="text-sm text-gray-500 mt-1">
                    Subtotal: ₹<%= (item.quantity * (item.discountedPrice || item.price)).toFixed(2) %>
                  </div>
                </div>
              </div>
              <% }); %>
            </div>

            <!-- Coupon Section -->
            <div class="mb-6">
              <button
                onclick="openCouponModal()"
                class="w-full bg-gray-100 text-gray-800 py-3 rounded-xl font-medium hover:bg-gray-200 transition-colors flex items-center justify-center gap-2"
              >
                <i class="fas fa-ticket-alt"></i>
                Apply Coupon
              </button>
              <div
                id="appliedCouponInfo"
                class="hidden mt-3 p-3 bg-green-50 rounded-lg"
              >
                <div class="flex justify-between items-center">
                  <div>
                    <p
                      class="text-green-800 font-medium"
                      id="appliedCouponCode"
                    ></p>
                    <p class="text-green-600 text-sm" id="discountInfo"></p>
                  </div>
                  <button
                    onclick="removeCoupon()"
                    class="text-red-500 hover:text-red-600"
                  >
                    <i class="fas fa-times"></i>
                  </button>
                </div>
              </div>
            </div>

            <!-- Price Breakdown -->
            <div class="space-y-3">
                <!-- Subtotal -->
                <div class="flex justify-between">
                    <span>Subtotal:</span>
                    <span>₹<span id="subtotal"><%= total.toFixed(2) %></span></span>
                </div>

                <!-- GST (18%) -->
                <div class="flex justify-between text-gray-600">
                    <span>GST (18%):</span>
                    <span>₹<span id="gstAmount"><%= (total * 0.18).toFixed(2) %></span></span>
                </div>

                <!-- Shipping Charges -->
                <div class="flex justify-between text-gray-600">
                    <span>Shipping Charges:</span>
                    <span>₹<span id="shippingCharges">
                        <%= total >= 1000 ? '0.00' : '40.00' %>
                    </span></span>
                </div>

                <!-- Coupon Discount -->
                <div id="discountRow" class="flex justify-between text-green-600 hidden">
                    <span>Coupon Discount:</span>
                    <span>-₹<span id="discountAmount">0.00</span></span>
                </div>

                <!-- Divider -->
                <div class="border-t border-gray-200 my-2"></div>

                <!-- Total -->
                <div class="flex justify-between font-bold text-lg">
                    <span>Total Amount:</span>
                    <span>₹<span id="finalTotal">
                        <%= (
                            total + 
                            (total * 0.18) + 
                            (total >= 1000 ? 0 : 40)
                        ).toFixed(2) %>
                    </span></span>
                </div>
            </div>

            <!-- Place Order Button -->
            <button
              onclick="placeOrder()"
              class="w-full bg-black text-white py-3 rounded-xl font-medium hover:bg-gray-800 transition-all duration-300 mt-6"
            >
              Place Order
            </button>

            <!-- Additional Info -->
            <div class="mt-4 text-center text-xs text-gray-500">
              <p class="flex items-center justify-center gap-2">
                <i class="fas fa-shield-alt"></i>
                Secure Checkout
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <%- include('../partials/footer') %>

    <!-- Add this coupon modal at the end of the body -->
    <div
      id="couponModal"
      class="fixed inset-0 bg-black bg-opacity-50 hidden z-50"
    >
      <div class="fixed inset-0 flex items-center justify-center p-4">
        <div
          class="bg-white rounded-2xl w-full max-w-md max-h-[80vh] overflow-hidden"
        >
          <!-- Modal Header -->
          <div class="p-4 border-b">
            <div class="flex justify-between items-center">
              <h3 class="text-lg font-semibold text-gray-800">
                Available Coupons
              </h3>
              <button
                onclick="closeCouponModal()"
                class="text-gray-400 hover:text-gray-500"
              >
                <i class="fas fa-times"></i>
              </button>
            </div>
          </div>

          <!-- Modal Body -->
          <div
            class="overflow-y-auto p-4 space-y-4"
            style="max-height: calc(80vh - 120px)"
          >
            <!-- Available Coupons Section -->
            <div id="activeCoupons" class="space-y-3">
              <div id="activeCouponsList" class="space-y-3">
                <!-- Active coupons will be inserted here -->
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal Backdrop -->
    <div
      id="modalBackdrop"
      class="fixed inset-0 bg-black/50 z-40 hidden transition-opacity duration-300 opacity-0"
    ></div>

    <!-- Alert Modal -->
    <div
      id="alertModal"
      class="fixed inset-0 flex items-center justify-center z-50 hidden"
    >
      <div
        class="bg-white rounded-2xl p-8 max-w-sm w-full mx-4 transform transition-all duration-300 scale-90 opacity-0 translate-y-4"
      >
        <!-- Success Alert -->
        <div id="successAlert" class="hidden">
          <div
            class="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-green-100 mb-6"
          >
            <i class="fas fa-check text-2xl text-green-600"></i>
          </div>
          <h3 class="text-xl font-semibold text-center text-gray-900 mb-2">
            Success!
          </h3>
          <p id="successMessage" class="text-gray-600 text-center mb-6"></p>
          <button
            class="w-full py-3 px-4 bg-black hover:bg-gray-800 text-white rounded-xl transition-colors duration-200"
          >
            Continue
          </button>
        </div>

        <!-- Error Alert -->
        <div id="errorAlert" class="hidden">
          <div
            class="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-red-100 mb-6"
          >
            <i class="fas fa-exclamation text-2xl text-red-600"></i>
          </div>
          <h3 class="text-xl font-semibold text-center text-gray-900 mb-2">
            Error
          </h3>
          <p id="errorMessage" class="text-gray-600 text-center mb-6"></p>
          <button
            class="w-full py-3 px-4 bg-black hover:bg-gray-800 text-white rounded-xl transition-colors duration-200"
          >
            Try Again
          </button>
        </div>

        <!-- Loading Alert -->
        <div id="loadingAlert" class="hidden">
          <div
            class="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-blue-100 mb-6"
          >
            <div
              class="animate-spin rounded-full h-8 w-8 border-4 border-blue-600 border-t-transparent"
            ></div>
          </div>
          <h3 class="text-xl font-semibold text-center text-gray-900 mb-2">
            Processing
          </h3>
          <p id="loadingMessage" class="text-gray-600 text-center mb-6">
            Please wait...
          </p>
        </div>
      </div>
    </div>

    <script>
      let appliedCoupon = null;
      let currentDiscount = 0;
      const cartTotal = <%= total %>;

      function openCouponModal() {
          fetchCoupons();
          document.getElementById('couponModal').classList.remove('hidden');
      }

      function closeCouponModal() {
          document.getElementById('couponModal').classList.add('hidden');
      }

      async function fetchCoupons() {
          try {
              const response = await fetch('/admin/coupons/active');
              const data = await response.json();
              
              console.log('Coupon response:', data);

              if (data.success && data.coupons && data.coupons.length > 0) {
                  const couponsHtml = data.coupons.map(coupon => `
                      <div class="border rounded-lg p-4 bg-gray-50">
                          <div class="flex justify-between items-start">
                              <div>
                                  <h4 class="font-semibold text-lg">${coupon.code}</h4>
                                  <p class="text-sm text-gray-600">${coupon.description || ''}</p>
                              </div>
                              <span class="text-orange-500 font-semibold">${coupon.discountPercentage}% OFF</span>
                          </div>
                          <div class="mt-2 text-xs text-gray-500">
                              <p>Min Purchase: ₹${coupon.minimumPurchase}</p>
                              <p>Max Discount: ₹${coupon.maximumDiscount}</p>
                          </div>
                          <button onclick="applyCouponCode('${coupon.code}')" 
                                  class="mt-3 w-full bg-orange-500 text-white py-2 rounded hover:bg-orange-600 transition-colors">
                              Apply Coupon
                          </button>
                      </div>
                  `).join('');

                  document.getElementById('activeCouponsList').innerHTML = couponsHtml;
              } else {
                  document.getElementById('activeCouponsList').innerHTML = `
                      <div class="text-center py-4">
                          <p class="text-gray-500">No active coupons available</p>
                      </div>
                  `;
              }
          } catch (error) {
              console.error('Error fetching coupons:', error);
              document.getElementById('activeCouponsList').innerHTML = `
                  <div class="text-center py-4">
                      <p class="text-red-500">Failed to load coupons. Please try again.</p>
                  </div>
              `;
          }
      }

      async function applyCouponCode(code) {
          try {
              if (appliedCoupon) {
                  throw new Error('Please remove the existing coupon before applying a new one');
              }

              const response = await fetch('/checkout/validate-coupon', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({ couponCode: code })
              });

              const data = await response.json();

              if (data.success) {
                  appliedCoupon = code;
                  currentDiscount = data.discount;

                  // Get the current values
                  const subtotal = parseFloat(document.getElementById('subtotal').textContent);
                  const gstAmount = subtotal * 0.18; // Calculate GST after discount
                  const shippingCharges = subtotal >= 1000 ? 0 : 40;

                  // Show discount row
                  const discountRow = document.getElementById('discountRow');
                  discountRow.classList.remove('hidden');
                  document.getElementById('discountAmount').textContent = data.discount.toFixed(2);

                  // Update GST amount (18% of subtotal)
                  document.getElementById('gstAmount').textContent = gstAmount.toFixed(2);

                  // Calculate final total (subtotal + GST + shipping - discount)
                  const finalTotal = subtotal + gstAmount + shippingCharges - data.discount;
                  document.getElementById('finalTotal').textContent = finalTotal.toFixed(2);

                  // Show applied coupon info
                  const appliedCouponInfo = document.getElementById('appliedCouponInfo');
                  appliedCouponInfo.classList.remove('hidden');
                  document.getElementById('appliedCouponCode').textContent = code;
                  document.getElementById('discountInfo').textContent = 
                      `You saved ₹${data.discount.toFixed(2)}`;

                  closeCouponModal();
                  await showAlert('success', 'Coupon applied successfully!');

                  // Update COD availability with new total
                  updatePaymentMethodsAfterCoupon(finalTotal);
              } else {
                  throw new Error(data.message);
              }
          } catch (error) {
              await showAlert('error', error.message || 'Failed to apply coupon');
          }
      }

      async function removeCoupon() {
          try {
              // Reset all values
              appliedCoupon = null;
              currentDiscount = 0;

              // Get the current subtotal
              const subtotal = parseFloat(document.getElementById('subtotal').textContent);
              const gstAmount = subtotal * 0.18;
              const shippingCharges = subtotal >= 1000 ? 0 : 40;

              // Hide discount row
              document.getElementById('discountRow').classList.add('hidden');
              document.getElementById('discountAmount').textContent = '0.00';

              // Update GST amount
              document.getElementById('gstAmount').textContent = gstAmount.toFixed(2);

              // Calculate final total without discount
              const finalTotal = subtotal + gstAmount + shippingCharges;
              document.getElementById('finalTotal').textContent = finalTotal.toFixed(2);

              // Hide applied coupon info
              document.getElementById('appliedCouponInfo').classList.add('hidden');
              document.getElementById('appliedCouponCode').textContent = '';
              document.getElementById('discountInfo').textContent = '';

              // Update COD availability with new total
              updatePaymentMethodsAfterCoupon(finalTotal);

              await showAlert('success', 'Coupon removed successfully');
          } catch (error) {
              await showAlert('error', 'Failed to remove coupon');
          }
      }

      // Add this function to calculate and update the total
      function updateTotalAmount() {
          const subtotal = parseFloat(document.getElementById('subtotal').textContent);
          const gstAmount = subtotal * 0.18;
          const shippingCharges = subtotal >= 1000 ? 0 : 40;
          const discount = currentDiscount || 0;

          const finalTotal = subtotal + gstAmount + shippingCharges - discount;
          document.getElementById('finalTotal').textContent = finalTotal.toFixed(2);
          
          // Update COD availability
          updatePaymentMethodsAfterCoupon(finalTotal);
      }

      // Call this when the page loads
      document.addEventListener('DOMContentLoaded', function() {
          updateTotalAmount();
      });

      async function placeOrder() {
          try {
              const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
              if (!selectedAddress) {
                  await showAlert('error', 'Please select a delivery address');
                  return;
              }

              const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked');
              if (!paymentMethod) {
                  await showAlert('error', 'Please select a payment method');
                  return;
              }

              const finalTotal = document.getElementById('finalTotal').textContent;

              if (paymentMethod.value === 'cod') {
                  // Show loading state
                  await showAlert('loading', 'Processing your order...');

                  const response = await fetch('/checkout/place-order', {
                      method: 'POST',
                      headers: {
                          'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                          addressId: selectedAddress.value,
                          paymentMethod: 'cod',
                          couponCode: appliedCoupon,
                          finalAmount: parseFloat(finalTotal)
                      })
                  });

                  if (!response.ok) {
                      throw new Error('Network response was not ok');
                  }

                  const data = await response.json();

                  if (data.success) {
                      // Hide the loading alert first
                      hideAlert();
                      // Show success alert
                      await showAlert('success', 'Order placed successfully!');
                      // Redirect to orders page
                      window.location.href = `/orders?success=true&orderId=${data.orderId}`;
                  } else {
                      throw new Error(data.message || 'Failed to place order');
                  }
              } else if (paymentMethod.value === 'online') {
                  try {
                      // Pass the coupon code if one is applied
                      const finalTotal = document.getElementById('finalTotal').innerText;
                      console.log("finalTotal",finalTotal)
                      const data = await createRazorpayOrder(selectedAddress.value, appliedCoupon,finalTotal);
                       console.log("data",data)
                      if (!data.success) {
                          throw new Error(data.message || 'Failed to create payment order');
                      }

                      const options = {
                          key: data.key,
                          amount: data.amount,
                          currency: "INR",
                          name: "LISTEN",
                          description: "Order Payment",
                          order_id: data.order.id,
                          handler: async function (response) {
                              try {
                                  console.log('Payment success:', response); // Add this for debugging
                                  const verifyResponse = await fetch('/checkout/verify-payment', {
                                      method: 'POST',
                                      headers: {
                                          'Content-Type': 'application/json'
                                      },
                                      body: JSON.stringify({
                                          razorpay_order_id: response.razorpay_order_id,
                                          razorpay_payment_id: response.razorpay_payment_id,
                                          razorpay_signature: response.razorpay_signature,
                                          addressId: selectedAddress.value
                                      })
                                  });

                                  const verifyData = await verifyResponse.json();
                                  if (verifyData.success) {
                                      await showAlert('success', 'Payment successful! Order placed.');
                                      window.location.href = `/orders?success=true&orderId=${verifyData.orderId}`;
                                  } else {
                                      throw new Error(verifyData.message || 'Payment verification failed');
                                  }
                              } catch (error) {
                                  console.error('Payment verification error:', error);
                                  await showAlert('error', error.message || 'Payment verification failed');
                              }
                          },
                          prefill: {
                              name: "<%= user.firstName %> <%= user.lastName %>",
                              email: "<%= user.email %>",
                              contact: "<%= user.phone %>"
                          },
                          theme: {
                              color: "#000000"
                          }
                      };

                      const rzp = new Razorpay(options);
                      rzp.open();

                  } catch (error) {
                      console.error('Razorpay error:', error);
                      await showAlert('error', error.message || 'Payment initialization failed');
                  }
              } else if (paymentMethod.value === 'wallet') {
                  // ... rest of your code for wallet ...
              }
          } catch (error) {
              // Hide the loading alert first
              hideAlert();
              console.error('Order placement error:', error);
              await showAlert('error', error.message || 'Failed to place order');
          }
      }

      function showInputModal(amountNeeded) {
          const modal = document.getElementById('inputModal');
          const backdrop = document.getElementById('modalBackdrop');
          const modalContent = modal.querySelector('div');

          document.getElementById('amountNeeded').textContent = amountNeeded.toFixed(2);
          document.getElementById('fundAmount').value = Math.ceil(amountNeeded);

          modal.classList.remove('hidden');
          backdrop.classList.remove('hidden');
          setTimeout(() => {
              backdrop.classList.remove('opacity-0');
              modalContent.classList.remove('scale-90', 'opacity-0', 'translate-y-4');
          }, 50);
      }

      function hideInputModal() {
          const modal = document.getElementById('inputModal');
          const backdrop = document.getElementById('modalBackdrop');
          const modalContent = modal.querySelector('div');

          backdrop.classList.add('opacity-0');
          modalContent.classList.add('scale-90', 'opacity-0', 'translate-y-4');

          setTimeout(() => {
              modal.classList.add('hidden');
              backdrop.classList.add('hidden');
          }, 300);
      }

      function updateCODAvailability(finalAmount) {
          const codOption = document.getElementById('codOption');
          const codPayment = document.getElementById('codPayment');
          const codAvailability = document.getElementById('codAvailability');
          const codMessage = document.getElementById('codMessage');

          if (finalAmount > 1000000) {
              codOption.classList.add('opacity-60');
              codOption.classList.remove('hover:bg-gray-50');
              codPayment.disabled = true;
              codAvailability.classList.remove('hidden');
              codAvailability.classList.add('bg-red-100', 'text-red-800');
              codAvailability.textContent = 'Not Available';
              codMessage.textContent = 'Not available for orders above ₹1,000';

              // If COD was selected, switch to a different payment method
              if (codPayment.checked) {
                  document.querySelector('input[name="paymentMethod"][value="online"]').checked = true;
              }
          } else {
              codOption.classList.remove('opacity-60');
              codOption.classList.add('hover:bg-gray-50');
              codPayment.disabled = false;
              codAvailability.classList.add('hidden');
              codMessage.textContent = 'Pay when you receive the order';
          }
      }

      // Update COD availability when coupon is applied or removed
      function updatePaymentMethodsAfterCoupon(finalAmount) {
          updateCODAvailability(finalAmount);
      }

      // Initial update
      document.addEventListener('DOMContentLoaded', function() {
          const finalTotal = parseFloat(document.getElementById('codOption').dataset.finalTotal);
          updateCODAvailability(finalTotal);
      });

      document.addEventListener('DOMContentLoaded', function() {
          // Check for success parameter in URL
          const urlParams = new URLSearchParams(window.location.search);
          const success = urlParams.get('success');
          const orderId = urlParams.get('orderId');

          if (success === 'true' && orderId) {
              showAlert('success', `Your order (${orderId}) has been placed successfully.`)
                  .then(() => {
                      // Clean up URL without refreshing the page
                      window.history.replaceState({}, document.title, '/orders');
                  });
          }
      });

      function showAlert(type, message) {
          return new Promise((resolve) => {
              const modal = document.getElementById('alertModal');
              const backdrop = document.getElementById('modalBackdrop');
              const modalContent = modal.querySelector('div');

              // Hide all alert types first
              ['successAlert', 'errorAlert', 'loadingAlert'].forEach(alertId => {
                  document.getElementById(alertId).classList.add('hidden');
              });

              // Show selected alert type
              const alertElement = document.getElementById(`${type}Alert`);
              if (!alertElement) {
                  console.error(`Alert type "${type}" not found`);
                  return;
              }
              alertElement.classList.remove('hidden');

              // Update message if provided
              if (message) {
                  const messageElement = document.getElementById(`${type}Message`);
                  if (messageElement) {
                      messageElement.textContent = message;
                  }
              }

              // Show modal with animation
              modal.classList.remove('hidden');
              backdrop.classList.remove('hidden');
              setTimeout(() => {
                  backdrop.classList.remove('opacity-0');
                  modalContent.classList.remove('scale-90', 'opacity-0', 'translate-y-4');
              }, 50);

              // For loading state, resolve immediately
              if (type === 'loading') {
                  resolve();
                  return;
              }

              // Add click handler to button (except for loading state)
              const button = alertElement.querySelector('button');
              if (button) {
                  button.onclick = () => {
                      hideAlert();
                      resolve(true);
                  };
              }
          });
      }

      function hideAlert() {
          const modal = document.getElementById('alertModal');
          const backdrop = document.getElementById('modalBackdrop');
          const modalContent = modal.querySelector('div');

          backdrop.classList.add('opacity-0');
          modalContent.classList.add('scale-90', 'opacity-0', 'translate-y-4');

          setTimeout(() => {
              modal.classList.add('hidden');
              backdrop.classList.add('hidden');
          }, 300);
      }

      document.addEventListener('DOMContentLoaded', async function() {
          const urlParams = new URLSearchParams(window.location.search);
          const success = urlParams.get('success');
          const orderId = urlParams.get('orderId');

          if (success === 'true' && orderId) {
              await showAlert('success', `Your order (${orderId}) has been placed successfully.`);
              window.history.replaceState({}, document.title, '/orders');
          }
      });

      async function createRazorpayOrder(addressId, couponCode,finalAmount) {
          try {
              const response = await fetch('/checkout/create-razorpay-order', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({ 
                      addressId,
                      couponCode ,
                      finalAmount
                  })
              });

              if (!response.ok) {
                  throw new Error('Failed to create order');
              }

              return await response.json();
          } catch (error) {
              console.error('Error creating Razorpay order:', error);
              throw error;
          }
      }

    </script>
  </body>
</html>
